
BCM_Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00001a82  00001b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000448  0080009c  0080009c  00001b52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002971  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001000  00000000  00000000  000048e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026da  00000000  00000000  000058e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e48  00000000  00000000  00007fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016f6  00000000  00000000  00008e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e8e  00000000  00000000  0000a502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000c390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3e       	cpi	r26, 0xE4	; 228
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 06 	call	0xc28	; 0xc28 <main>
      8a:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Led_Init>:
/**
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
      9e:	89 81       	ldd	r24, Y+1	; 0x01
      a0:	88 2f       	mov	r24, r24
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	80 32       	cpi	r24, 0x20	; 32
      a6:	91 05       	cpc	r25, r1
      a8:	c1 f0       	breq	.+48     	; 0xda <Led_Init+0x48>
      aa:	81 32       	cpi	r24, 0x21	; 33
      ac:	91 05       	cpc	r25, r1
      ae:	1c f4       	brge	.+6      	; 0xb6 <Led_Init+0x24>
      b0:	40 97       	sbiw	r24, 0x10	; 16
      b2:	41 f0       	breq	.+16     	; 0xc4 <Led_Init+0x32>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
      b4:	33 c0       	rjmp	.+102    	; 0x11c <Led_Init+0x8a>
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
	switch(led_Num)
      b6:	80 34       	cpi	r24, 0x40	; 64
      b8:	91 05       	cpc	r25, r1
      ba:	d1 f0       	breq	.+52     	; 0xf0 <Led_Init+0x5e>
      bc:	80 38       	cpi	r24, 0x80	; 128
      be:	91 05       	cpc	r25, r1
      c0:	11 f1       	breq	.+68     	; 0x106 <Led_Init+0x74>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
      c2:	2c c0       	rjmp	.+88     	; 0x11c <Led_Init+0x8a>
void Led_Init(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinDirection(LED_PORT,LED0,SET_OUT);
      c4:	4f ef       	ldi	r20, 0xFF	; 255
      c6:	60 e1       	ldi	r22, 0x10	; 16
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 9c 06 	call	0xd38	; 0xd38 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	60 e1       	ldi	r22, 0x10	; 16
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
      d8:	21 c0       	rjmp	.+66     	; 0x11c <Led_Init+0x8a>
		case LED1 :
		Gpio_PinDirection(LED_PORT,LED1,SET_OUT);
      da:	4f ef       	ldi	r20, 0xFF	; 255
      dc:	60 e2       	ldi	r22, 0x20	; 32
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	0e 94 9c 06 	call	0xd38	; 0xd38 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	60 e2       	ldi	r22, 0x20	; 32
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
      ee:	16 c0       	rjmp	.+44     	; 0x11c <Led_Init+0x8a>
		case LED2 :
		Gpio_PinDirection(LED_PORT,LED2,SET_OUT);
      f0:	4f ef       	ldi	r20, 0xFF	; 255
      f2:	60 e4       	ldi	r22, 0x40	; 64
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	0e 94 9c 06 	call	0xd38	; 0xd38 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	60 e4       	ldi	r22, 0x40	; 64
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     104:	0b c0       	rjmp	.+22     	; 0x11c <Led_Init+0x8a>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
     106:	4f ef       	ldi	r20, 0xFF	; 255
     108:	60 e8       	ldi	r22, 0x80	; 128
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	0e 94 9c 06 	call	0xd38	; 0xd38 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	60 e8       	ldi	r22, 0x80	; 128
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     11a:	00 00       	nop
		default:
		break;
	}
}
     11c:	00 00       	nop
     11e:	0f 90       	pop	r0
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <Led_On>:
/**
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	1f 92       	push	r1
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	88 2f       	mov	r24, r24
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	80 32       	cpi	r24, 0x20	; 32
     13a:	91 05       	cpc	r25, r1
     13c:	99 f0       	breq	.+38     	; 0x164 <Led_On+0x3e>
     13e:	81 32       	cpi	r24, 0x21	; 33
     140:	91 05       	cpc	r25, r1
     142:	1c f4       	brge	.+6      	; 0x14a <Led_On+0x24>
     144:	40 97       	sbiw	r24, 0x10	; 16
     146:	41 f0       	breq	.+16     	; 0x158 <Led_On+0x32>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     148:	1f c0       	rjmp	.+62     	; 0x188 <Led_On+0x62>
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
	switch(led_Num)
     14a:	80 34       	cpi	r24, 0x40	; 64
     14c:	91 05       	cpc	r25, r1
     14e:	81 f0       	breq	.+32     	; 0x170 <Led_On+0x4a>
     150:	80 38       	cpi	r24, 0x80	; 128
     152:	91 05       	cpc	r25, r1
     154:	99 f0       	breq	.+38     	; 0x17c <Led_On+0x56>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     156:	18 c0       	rjmp	.+48     	; 0x188 <Led_On+0x62>
void Led_On(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,HIGH);
     158:	41 e0       	ldi	r20, 0x01	; 1
     15a:	60 e1       	ldi	r22, 0x10	; 16
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     162:	12 c0       	rjmp	.+36     	; 0x188 <Led_On+0x62>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,HIGH);
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	60 e2       	ldi	r22, 0x20	; 32
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     16e:	0c c0       	rjmp	.+24     	; 0x188 <Led_On+0x62>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,HIGH);
     170:	41 e0       	ldi	r20, 0x01	; 1
     172:	60 e4       	ldi	r22, 0x40	; 64
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     17a:	06 c0       	rjmp	.+12     	; 0x188 <Led_On+0x62>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
     17c:	41 e0       	ldi	r20, 0x01	; 1
     17e:	60 e8       	ldi	r22, 0x80	; 128
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     186:	00 00       	nop
		default:
		break;
	}
}
     188:	00 00       	nop
     18a:	0f 90       	pop	r0
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	08 95       	ret

00000192 <Led_Off>:
/**
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	1f 92       	push	r1
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     19e:	89 81       	ldd	r24, Y+1	; 0x01
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	80 32       	cpi	r24, 0x20	; 32
     1a6:	91 05       	cpc	r25, r1
     1a8:	99 f0       	breq	.+38     	; 0x1d0 <Led_Off+0x3e>
     1aa:	81 32       	cpi	r24, 0x21	; 33
     1ac:	91 05       	cpc	r25, r1
     1ae:	1c f4       	brge	.+6      	; 0x1b6 <Led_Off+0x24>
     1b0:	40 97       	sbiw	r24, 0x10	; 16
     1b2:	41 f0       	breq	.+16     	; 0x1c4 <Led_Off+0x32>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     1b4:	1f c0       	rjmp	.+62     	; 0x1f4 <Led_Off+0x62>
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
	switch(led_Num)
     1b6:	80 34       	cpi	r24, 0x40	; 64
     1b8:	91 05       	cpc	r25, r1
     1ba:	81 f0       	breq	.+32     	; 0x1dc <Led_Off+0x4a>
     1bc:	80 38       	cpi	r24, 0x80	; 128
     1be:	91 05       	cpc	r25, r1
     1c0:	99 f0       	breq	.+38     	; 0x1e8 <Led_Off+0x56>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     1c2:	18 c0       	rjmp	.+48     	; 0x1f4 <Led_Off+0x62>
void Led_Off(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	60 e1       	ldi	r22, 0x10	; 16
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     1ce:	12 c0       	rjmp	.+36     	; 0x1f4 <Led_Off+0x62>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	60 e2       	ldi	r22, 0x20	; 32
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     1da:	0c c0       	rjmp	.+24     	; 0x1f4 <Led_Off+0x62>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	60 e4       	ldi	r22, 0x40	; 64
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <Led_Off+0x62>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	60 e8       	ldi	r22, 0x80	; 128
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 48 07 	call	0xe90	; 0xe90 <Gpio_PinWrite>
		break;
     1f2:	00 00       	nop
		default:
		break;
	}
}
     1f4:	00 00       	nop
     1f6:	0f 90       	pop	r0
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <Led_Tog>:
/**
 * Description: Function to Toggle the Led.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Tog(led led_Num)
{
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	1f 92       	push	r1
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	88 2f       	mov	r24, r24
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	80 32       	cpi	r24, 0x20	; 32
     212:	91 05       	cpc	r25, r1
     214:	91 f0       	breq	.+36     	; 0x23a <Led_Tog+0x3c>
     216:	81 32       	cpi	r24, 0x21	; 33
     218:	91 05       	cpc	r25, r1
     21a:	1c f4       	brge	.+6      	; 0x222 <Led_Tog+0x24>
     21c:	40 97       	sbiw	r24, 0x10	; 16
     21e:	41 f0       	breq	.+16     	; 0x230 <Led_Tog+0x32>
		break;
		case LED3 :
		Gpio_PinToggle(LED_PORT,LED3);
		break;
		default:
		break;
     220:	1b c0       	rjmp	.+54     	; 0x258 <Led_Tog+0x5a>
 * Description: Function to Toggle the Led.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Tog(led led_Num)
{
	switch(led_Num)
     222:	80 34       	cpi	r24, 0x40	; 64
     224:	91 05       	cpc	r25, r1
     226:	71 f0       	breq	.+28     	; 0x244 <Led_Tog+0x46>
     228:	80 38       	cpi	r24, 0x80	; 128
     22a:	91 05       	cpc	r25, r1
     22c:	81 f0       	breq	.+32     	; 0x24e <Led_Tog+0x50>
		break;
		case LED3 :
		Gpio_PinToggle(LED_PORT,LED3);
		break;
		default:
		break;
     22e:	14 c0       	rjmp	.+40     	; 0x258 <Led_Tog+0x5a>
void Led_Tog(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinToggle(LED_PORT,LED0);
     230:	60 e1       	ldi	r22, 0x10	; 16
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 e7 07 	call	0xfce	; 0xfce <Gpio_PinToggle>
		break;
     238:	0f c0       	rjmp	.+30     	; 0x258 <Led_Tog+0x5a>
		case LED1 :
		Gpio_PinToggle(LED_PORT,LED1);
     23a:	60 e2       	ldi	r22, 0x20	; 32
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0e 94 e7 07 	call	0xfce	; 0xfce <Gpio_PinToggle>
		break;
     242:	0a c0       	rjmp	.+20     	; 0x258 <Led_Tog+0x5a>
		case LED2 :
		Gpio_PinToggle(LED_PORT,LED2);
     244:	60 e4       	ldi	r22, 0x40	; 64
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 e7 07 	call	0xfce	; 0xfce <Gpio_PinToggle>
		break;
     24c:	05 c0       	rjmp	.+10     	; 0x258 <Led_Tog+0x5a>
		case LED3 :
		Gpio_PinToggle(LED_PORT,LED3);
     24e:	60 e8       	ldi	r22, 0x80	; 128
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0e 94 e7 07 	call	0xfce	; 0xfce <Gpio_PinToggle>
		break;
     256:	00 00       	nop
		default:
		break;
	}
     258:	00 00       	nop
     25a:	0f 90       	pop	r0
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <BCM_Init>:
void BCM_Rx_Callback(void)
{
	gStrBcmBuffer.PtrFunc[gBufferRxIndex] = UART_Read();
	gEnumBcm_Rx_Flag = RECEIVED;
	gEnumBcm_Rx_Lock = LOCKED;
}
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	00 d0       	rcall	.+0      	; 0x268 <BCM_Init+0x6>
     268:	1f 92       	push	r1
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	9b 83       	std	Y+3, r25	; 0x03
     270:	8a 83       	std	Y+2, r24	; 0x02
     272:	19 82       	std	Y+1, r1	; 0x01
     274:	81 e4       	ldi	r24, 0x41	; 65
     276:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <StrBCM_Cfg>
     27a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <gEnumBcm_Rx_Lock>
     27e:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <gEnumBcm_Tx_Lock>
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	9b 81       	ldd	r25, Y+3	; 0x03
     286:	89 2b       	or	r24, r25
     288:	41 f1       	breq	.+80     	; 0x2da <BCM_Init+0x78>
     28a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <StrBCM_Cfg+0x1>
     28e:	88 2f       	mov	r24, r24
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	91 05       	cpc	r25, r1
     296:	31 f0       	breq	.+12     	; 0x2a4 <BCM_Init+0x42>
     298:	82 30       	cpi	r24, 0x02	; 2
     29a:	91 05       	cpc	r25, r1
     29c:	89 f0       	breq	.+34     	; 0x2c0 <BCM_Init+0x5e>
     29e:	89 2b       	or	r24, r25
     2a0:	41 f0       	breq	.+16     	; 0x2b2 <BCM_Init+0x50>
     2a2:	1d c0       	rjmp	.+58     	; 0x2de <BCM_Init+0x7c>
     2a4:	8a 81       	ldd	r24, Y+2	; 0x02
     2a6:	9b 81       	ldd	r25, Y+3	; 0x03
     2a8:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <StrBCM_Cfg+0x3>
     2ac:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <StrBCM_Cfg+0x2>
     2b0:	16 c0       	rjmp	.+44     	; 0x2de <BCM_Init+0x7c>
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	9b 81       	ldd	r25, Y+3	; 0x03
     2b6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <StrBCM_Cfg+0x5>
     2ba:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <StrBCM_Cfg+0x4>
     2be:	0f c0       	rjmp	.+30     	; 0x2de <BCM_Init+0x7c>
     2c0:	8a 81       	ldd	r24, Y+2	; 0x02
     2c2:	9b 81       	ldd	r25, Y+3	; 0x03
     2c4:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <StrBCM_Cfg+0x3>
     2c8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <StrBCM_Cfg+0x2>
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	9b 81       	ldd	r25, Y+3	; 0x03
     2d0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <StrBCM_Cfg+0x5>
     2d4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <StrBCM_Cfg+0x4>
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <BCM_Init+0x7c>
     2da:	89 e0       	ldi	r24, 0x09	; 9
     2dc:	89 83       	std	Y+1, r24	; 0x01
     2de:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Communication_type>
     2e2:	88 2f       	mov	r24, r24
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	91 05       	cpc	r25, r1
     2ea:	69 f0       	breq	.+26     	; 0x306 <BCM_Init+0xa4>
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	91 05       	cpc	r25, r1
     2f0:	61 f0       	breq	.+24     	; 0x30a <BCM_Init+0xa8>
     2f2:	89 2b       	or	r24, r25
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <BCM_Init+0x96>
     2f6:	0a c0       	rjmp	.+20     	; 0x30c <BCM_Init+0xaa>
     2f8:	0e 94 94 0b 	call	0x1728	; 0x1728 <UART_Init>
     2fc:	8c ec       	ldi	r24, 0xCC	; 204
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 a9 0c 	call	0x1952	; 0x1952 <UART_SetCallBack>
     304:	03 c0       	rjmp	.+6      	; 0x30c <BCM_Init+0xaa>
     306:	00 00       	nop
     308:	01 c0       	rjmp	.+2      	; 0x30c <BCM_Init+0xaa>
     30a:	00 00       	nop
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <BCM_DeInit>:
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	1f 92       	push	r1
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	89 83       	std	Y+1, r24	; 0x01
     328:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__data_end+0x1>
     32c:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__data_end>
     330:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <gBufferRxSize+0x1>
     334:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <gBufferRxSize>
     338:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <gEnumBcm_Rx_Lock>
     33c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <gEnumBcm_Tx_Lock>
     340:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <gStrBcmBuffer+0x3>
     344:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <gStrBcmBuffer+0x2>
     348:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <gStrBcmBuffer+0x1>
     34c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <gStrBcmBuffer>
     350:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <gStrBcmBuffer+0x4>
     354:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <gEnumBcm_Rx_state>
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gEnumBcm_Tx_Flag>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gEnumBcm_SizeFlag>
     36a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Communication_type>
     36e:	88 2f       	mov	r24, r24
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	91 05       	cpc	r25, r1
     376:	31 f0       	breq	.+12     	; 0x384 <BCM_DeInit+0x6a>
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	91 05       	cpc	r25, r1
     37c:	29 f0       	breq	.+10     	; 0x388 <BCM_DeInit+0x6e>
     37e:	89 2b       	or	r24, r25
     380:	29 f0       	breq	.+10     	; 0x38c <BCM_DeInit+0x72>
     382:	05 c0       	rjmp	.+10     	; 0x38e <BCM_DeInit+0x74>
     384:	00 00       	nop
     386:	03 c0       	rjmp	.+6      	; 0x38e <BCM_DeInit+0x74>
     388:	00 00       	nop
     38a:	01 c0       	rjmp	.+2      	; 0x38e <BCM_DeInit+0x74>
     38c:	00 00       	nop
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <BCM_Tx_Callback>:
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <gEnumBcm_Tx_Flag>
     3a4:	00 00       	nop
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <BCM_Tx_SetupBuffer>:
 * Description: This Function is used to construct the frame by initializing every element in the structure used
 * Then we lock buffer to make sure that no INITIAL_VALUE_ONE corrupts the data which will be sent
 * @return Status: of the Function according to the Error handling
 **/
EnmBCMError_t BCM_Tx_SetupBuffer(uint8 *Buffer,uint16 Size)
{
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <BCM_Tx_SetupBuffer+0x6>
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <BCM_Tx_SetupBuffer+0x8>
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	9b 83       	std	Y+3, r25	; 0x03
     3bc:	8a 83       	std	Y+2, r24	; 0x02
     3be:	7d 83       	std	Y+5, r23	; 0x05
     3c0:	6c 83       	std	Y+4, r22	; 0x04
	EnmBCMError_t API_State = OK_BCM;
     3c2:	19 82       	std	Y+1, r1	; 0x01
	
	if( UNLOCKED == gEnumBcm_Tx_Lock)
     3c4:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <gEnumBcm_Tx_Lock>
     3c8:	88 23       	and	r24, r24
     3ca:	61 f5       	brne	.+88     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		if ( NULL != Buffer )
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	9b 81       	ldd	r25, Y+3	; 0x03
     3d0:	89 2b       	or	r24, r25
     3d2:	29 f1       	breq	.+74     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			if(Size <= MAX_DATA_SEND)
     3d4:	8c 81       	ldd	r24, Y+4	; 0x04
     3d6:	9d 81       	ldd	r25, Y+5	; 0x05
     3d8:	89 3e       	cpi	r24, 0xE9	; 233
     3da:	93 40       	sbci	r25, 0x03	; 3
     3dc:	e8 f4       	brcc	.+58     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			{
				gStrBcmBuffer.CheckSum   = INITIAL_VALUE_ZERO;
     3de:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <gStrBcmBuffer+0x4>
				gStrBcmBuffer.BufferSize = Size;
     3e2:	8c 81       	ldd	r24, Y+4	; 0x04
     3e4:	9d 81       	ldd	r25, Y+5	; 0x05
     3e6:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <gStrBcmBuffer+0x3>
     3ea:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <gStrBcmBuffer+0x2>
				gStrBcmBuffer.PtrFunc  = Buffer;
     3ee:	8a 81       	ldd	r24, Y+2	; 0x02
     3f0:	9b 81       	ldd	r25, Y+3	; 0x03
     3f2:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <gStrBcmBuffer+0x1>
     3f6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <gStrBcmBuffer>
				gEnumBcm_Tx_Lock			 = LOCKED;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <gEnumBcm_Tx_Lock>
				gEnumBcm_Tx_state			 = ID_SEND_STATE;
     400:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <gEnumBcm_Tx_state>
				gBufferTxIndex			 = INITIAL_VALUE_ZERO;
     404:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <gBufferTxIndex+0x1>
     408:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <gBufferTxIndex>
				gEnumBcm_Tx_Flag			 = SENT_DONE;
     40c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <gEnumBcm_Tx_Flag>
				gEnumBcm_SizeFlag			 = FIRST_BYTE;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gEnumBcm_SizeFlag>
     416:	08 c0       	rjmp	.+16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			}
			else
			{
				API_State = INVALID_DATA_LENGTH;
     418:	86 e0       	ldi	r24, 0x06	; 6
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			}
		}
		else
		{
			API_State = INVALID_POINTER_TO_BUFFER;
     41e:	88 e0       	ldi	r24, 0x08	; 8
     420:	89 83       	std	Y+1, r24	; 0x01
     422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		}
	}
	else
	{
		API_State = BUFFER_LOCKED;
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	89 83       	std	Y+1, r24	; 0x01
	}
	return API_State;
     428:	89 81       	ldd	r24, Y+1	; 0x01
}
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <BCM_TxDispatcher>:
 * Function : BCM_TxDispatcher
 * Description: This Function is used to handle the Sending in the run time
 * @return Void
 **/
void BCM_TxDispatcher(void)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
	if ( LOCKED == gEnumBcm_Tx_Lock )
     442:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <gEnumBcm_Tx_Lock>
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	09 f0       	breq	.+2      	; 0x44c <BCM_TxDispatcher+0x12>
     44a:	99 c0       	rjmp	.+306    	; 0x57e <BCM_TxDispatcher+0x144>
	{
		if( SENT_DONE == gEnumBcm_Tx_Flag)
     44c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gEnumBcm_Tx_Flag>
     450:	88 23       	and	r24, r24
     452:	09 f0       	breq	.+2      	; 0x456 <BCM_TxDispatcher+0x1c>
     454:	94 c0       	rjmp	.+296    	; 0x57e <BCM_TxDispatcher+0x144>
		{
			gEnumBcm_Tx_Flag = NOT_SENT;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gEnumBcm_Tx_Flag>
			switch(gEnumBcm_Tx_state)
     45c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <gEnumBcm_Tx_state>
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	91 05       	cpc	r25, r1
     468:	a1 f0       	breq	.+40     	; 0x492 <BCM_TxDispatcher+0x58>
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	91 05       	cpc	r25, r1
     46e:	1c f4       	brge	.+6      	; 0x476 <BCM_TxDispatcher+0x3c>
     470:	89 2b       	or	r24, r25
     472:	41 f0       	breq	.+16     	; 0x484 <BCM_TxDispatcher+0x4a>
					StrBCM_Cfg.BCMPtr_Tx_FuncCallBk();
					gEnumBcm_Tx_Lock = UNLOCKED;
					BCM_DeInit();
					break;
				default:
					break;
     474:	84 c0       	rjmp	.+264    	; 0x57e <BCM_TxDispatcher+0x144>
	if ( LOCKED == gEnumBcm_Tx_Lock )
	{
		if( SENT_DONE == gEnumBcm_Tx_Flag)
		{
			gEnumBcm_Tx_Flag = NOT_SENT;
			switch(gEnumBcm_Tx_state)
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	91 05       	cpc	r25, r1
     47a:	69 f1       	breq	.+90     	; 0x4d6 <BCM_TxDispatcher+0x9c>
     47c:	03 97       	sbiw	r24, 0x03	; 3
     47e:	09 f4       	brne	.+2      	; 0x482 <BCM_TxDispatcher+0x48>
     480:	6c c0       	rjmp	.+216    	; 0x55a <BCM_TxDispatcher+0x120>
					StrBCM_Cfg.BCMPtr_Tx_FuncCallBk();
					gEnumBcm_Tx_Lock = UNLOCKED;
					BCM_DeInit();
					break;
				default:
					break;
     482:	7d c0       	rjmp	.+250    	; 0x57e <BCM_TxDispatcher+0x144>
		{
			gEnumBcm_Tx_Flag = NOT_SENT;
			switch(gEnumBcm_Tx_state)
			{
				case ID_SEND_STATE:
					BCM_TxSend(BCM_ID);
     484:	81 e4       	ldi	r24, 0x41	; 65
     486:	0e 94 c3 02 	call	0x586	; 0x586 <BCM_TxSend>
					gEnumBcm_Tx_state = SIZE_SEND_STATE;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <gEnumBcm_Tx_state>
					break;
     490:	76 c0       	rjmp	.+236    	; 0x57e <BCM_TxDispatcher+0x144>
				case SIZE_SEND_STATE:
					if( gEnumBcm_SizeFlag == FIRST_BYTE )
     492:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gEnumBcm_SizeFlag>
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	51 f4       	brne	.+20     	; 0x4ae <BCM_TxDispatcher+0x74>
					{
						BCM_TxSend( (uint8) gStrBcmBuffer.BufferSize);
     49a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <gStrBcmBuffer+0x2>
     49e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <gStrBcmBuffer+0x3>
     4a2:	0e 94 c3 02 	call	0x586	; 0x586 <BCM_TxSend>
						gEnumBcm_SizeFlag = SECOND_BYTE;
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gEnumBcm_SizeFlag>
					}
					else
					{
						// Do Nothing
					}
					break;
     4ac:	65 c0       	rjmp	.+202    	; 0x578 <BCM_TxDispatcher+0x13e>
					if( gEnumBcm_SizeFlag == FIRST_BYTE )
					{
						BCM_TxSend( (uint8) gStrBcmBuffer.BufferSize);
						gEnumBcm_SizeFlag = SECOND_BYTE;
					}
					else if( gEnumBcm_SizeFlag == SECOND_BYTE )
     4ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gEnumBcm_SizeFlag>
     4b2:	82 30       	cpi	r24, 0x02	; 2
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <BCM_TxDispatcher+0x7e>
     4b6:	60 c0       	rjmp	.+192    	; 0x578 <BCM_TxDispatcher+0x13e>
					{
						BCM_TxSend( (uint8)(gStrBcmBuffer.BufferSize >> SHIFT_FACTOR) );
     4b8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <gStrBcmBuffer+0x2>
     4bc:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <gStrBcmBuffer+0x3>
     4c0:	89 2f       	mov	r24, r25
     4c2:	99 27       	eor	r25, r25
     4c4:	0e 94 c3 02 	call	0x586	; 0x586 <BCM_TxSend>
						gEnumBcm_SizeFlag = FIRST_BYTE;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gEnumBcm_SizeFlag>
						gEnumBcm_Tx_state = DATA_SEND_STATE;
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <gEnumBcm_Tx_state>
					}
					else
					{
						// Do Nothing
					}
					break;
     4d4:	51 c0       	rjmp	.+162    	; 0x578 <BCM_TxDispatcher+0x13e>
				case DATA_SEND_STATE:
					if ( gBufferTxIndex < gStrBcmBuffer.BufferSize)
     4d6:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <gStrBcmBuffer+0x2>
     4da:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <gStrBcmBuffer+0x3>
     4de:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <gBufferTxIndex>
     4e2:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <gBufferTxIndex+0x1>
     4e6:	82 17       	cp	r24, r18
     4e8:	93 07       	cpc	r25, r19
     4ea:	40 f5       	brcc	.+80     	; 0x53c <BCM_TxDispatcher+0x102>
					{
						BCM_TxSend(gStrBcmBuffer.PtrFunc[gBufferTxIndex]);
     4ec:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <gStrBcmBuffer>
     4f0:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <gStrBcmBuffer+0x1>
     4f4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <gBufferTxIndex>
     4f8:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <gBufferTxIndex+0x1>
     4fc:	82 0f       	add	r24, r18
     4fe:	93 1f       	adc	r25, r19
     500:	fc 01       	movw	r30, r24
     502:	80 81       	ld	r24, Z
     504:	0e 94 c3 02 	call	0x586	; 0x586 <BCM_TxSend>
						gStrBcmBuffer.CheckSum += gStrBcmBuffer.PtrFunc[gBufferTxIndex];
     508:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <gStrBcmBuffer>
     50c:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <gStrBcmBuffer+0x1>
     510:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <gBufferTxIndex>
     514:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <gBufferTxIndex+0x1>
     518:	82 0f       	add	r24, r18
     51a:	93 1f       	adc	r25, r19
     51c:	fc 01       	movw	r30, r24
     51e:	80 81       	ld	r24, Z
     520:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <gStrBcmBuffer+0x4>
     524:	89 0f       	add	r24, r25
     526:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <gStrBcmBuffer+0x4>
						gBufferTxIndex++;
     52a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <gBufferTxIndex>
     52e:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <gBufferTxIndex+0x1>
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <gBufferTxIndex+0x1>
     538:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <gBufferTxIndex>
					}
					
					if( gBufferTxIndex == gStrBcmBuffer.BufferSize )
     53c:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <gStrBcmBuffer+0x2>
     540:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <gStrBcmBuffer+0x3>
     544:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <gBufferTxIndex>
     548:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <gBufferTxIndex+0x1>
     54c:	28 17       	cp	r18, r24
     54e:	39 07       	cpc	r19, r25
     550:	a9 f4       	brne	.+42     	; 0x57c <BCM_TxDispatcher+0x142>
					{
						gEnumBcm_Tx_state = CHECKSUM_SEND_STATE;
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <gEnumBcm_Tx_state>
					}
					
					break;
     558:	11 c0       	rjmp	.+34     	; 0x57c <BCM_TxDispatcher+0x142>
				case CHECKSUM_SEND_STATE:
					BCM_TxSend(gStrBcmBuffer.CheckSum);
     55a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <gStrBcmBuffer+0x4>
     55e:	0e 94 c3 02 	call	0x586	; 0x586 <BCM_TxSend>
					StrBCM_Cfg.BCMPtr_Tx_FuncCallBk();
     562:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <StrBCM_Cfg+0x4>
     566:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <StrBCM_Cfg+0x5>
     56a:	fc 01       	movw	r30, r24
     56c:	09 95       	icall
					gEnumBcm_Tx_Lock = UNLOCKED;
     56e:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <gEnumBcm_Tx_Lock>
					BCM_DeInit();
     572:	0e 94 8d 01 	call	0x31a	; 0x31a <BCM_DeInit>
					break;
     576:	03 c0       	rjmp	.+6      	; 0x57e <BCM_TxDispatcher+0x144>
					}
					else
					{
						// Do Nothing
					}
					break;
     578:	00 00       	nop
     57a:	01 c0       	rjmp	.+2      	; 0x57e <BCM_TxDispatcher+0x144>
					if( gBufferTxIndex == gStrBcmBuffer.BufferSize )
					{
						gEnumBcm_Tx_state = CHECKSUM_SEND_STATE;
					}
					
					break;
     57c:	00 00       	nop
	}
	else
	{
		// Do Nothing
	}
}
     57e:	00 00       	nop
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <BCM_TxSend>:
 * Function : BCM_TxSend
 * Description: This Function is used to Send a Byte of data By the Communication Peripheral
 * @return Status: of the Function according to the Error handling
 **/
EnmBCMError_t BCM_TxSend(uint8 data)
{
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	00 d0       	rcall	.+0      	; 0x58c <BCM_TxSend+0x6>
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	8a 83       	std	Y+2, r24	; 0x02
	EnmBCMError_t API_State = OK_BCM;
     592:	19 82       	std	Y+1, r1	; 0x01
	
	switch(Communication_type)
     594:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Communication_type>
     598:	88 2f       	mov	r24, r24
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	91 05       	cpc	r25, r1
     5a0:	61 f0       	breq	.+24     	; 0x5ba <BCM_TxSend+0x34>
     5a2:	82 30       	cpi	r24, 0x02	; 2
     5a4:	91 05       	cpc	r25, r1
     5a6:	59 f0       	breq	.+22     	; 0x5be <BCM_TxSend+0x38>
     5a8:	89 2b       	or	r24, r25
     5aa:	21 f4       	brne	.+8      	; 0x5b4 <BCM_TxSend+0x2e>
	{
		case UART:
		/* UART Send */
		UART_Send(data);
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_Send>
		break;
     5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <BCM_TxSend+0x3a>
		break;
		case I2C:
		// N
		break;
		default:
		API_State = INVALID_ARGUMENT;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	89 83       	std	Y+1, r24	; 0x01
		break;
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <BCM_TxSend+0x3a>
		/* UART Send */
		UART_Send(data);
		break;
		case SPI:
		// N
		break;
     5ba:	00 00       	nop
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <BCM_TxSend+0x3a>
		case I2C:
		// N
		break;
     5be:	00 00       	nop
		default:
		API_State = INVALID_ARGUMENT;
		break;
	}
	return API_State;
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	08 95       	ret

000005cc <TMU_Init>:
	
	/* return the Number of jobs back to INITIAL_VALUE_ONE */
	gJobsCount = INITIAL_VALUE_ZERO;
	
	return state;
}
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	28 97       	sbiw	r28, 0x08	; 8
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	98 87       	std	Y+8, r25	; 0x08
     5e2:	8f 83       	std	Y+7, r24	; 0x07
     5e4:	19 82       	std	Y+1, r1	; 0x01
     5e6:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <gJobsCount>
     5ea:	8f 81       	ldd	r24, Y+7	; 0x07
     5ec:	98 85       	ldd	r25, Y+8	; 0x08
     5ee:	fc 01       	movw	r30, r24
     5f0:	80 81       	ld	r24, Z
     5f2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <gTimerNumber>
     5f6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <gTimer_Flag>
     5fa:	8f 81       	ldd	r24, Y+7	; 0x07
     5fc:	98 85       	ldd	r25, Y+8	; 0x08
     5fe:	fc 01       	movw	r30, r24
     600:	81 81       	ldd	r24, Z+1	; 0x01
     602:	48 2f       	mov	r20, r24
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	28 ee       	ldi	r18, 0xE8	; 232
     608:	33 e0       	ldi	r19, 0x03	; 3
     60a:	42 9f       	mul	r20, r18
     60c:	c0 01       	movw	r24, r0
     60e:	43 9f       	mul	r20, r19
     610:	90 0d       	add	r25, r0
     612:	52 9f       	mul	r21, r18
     614:	90 0d       	add	r25, r0
     616:	11 24       	eor	r1, r1
     618:	09 2e       	mov	r0, r25
     61a:	00 0c       	add	r0, r0
     61c:	aa 0b       	sbc	r26, r26
     61e:	bb 0b       	sbc	r27, r27
     620:	8b 83       	std	Y+3, r24	; 0x03
     622:	9c 83       	std	Y+4, r25	; 0x04
     624:	ad 83       	std	Y+5, r26	; 0x05
     626:	be 83       	std	Y+6, r27	; 0x06
     628:	1a 82       	std	Y+2, r1	; 0x02
     62a:	4a c0       	rjmp	.+148    	; 0x6c0 <TMU_Init+0xf4>
     62c:	8a 81       	ldd	r24, Y+2	; 0x02
     62e:	28 2f       	mov	r18, r24
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	c9 01       	movw	r24, r18
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	84 55       	subi	r24, 0x54	; 84
     646:	9f 4f       	sbci	r25, 0xFF	; 255
     648:	fc 01       	movw	r30, r24
     64a:	10 82       	st	Z, r1
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	28 2f       	mov	r18, r24
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	c9 01       	movw	r24, r18
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	82 0f       	add	r24, r18
     65a:	93 1f       	adc	r25, r19
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	82 55       	subi	r24, 0x52	; 82
     666:	9f 4f       	sbci	r25, 0xFF	; 255
     668:	fc 01       	movw	r30, r24
     66a:	10 82       	st	Z, r1
     66c:	11 82       	std	Z+1, r1	; 0x01
     66e:	12 82       	std	Z+2, r1	; 0x02
     670:	13 82       	std	Z+3, r1	; 0x03
     672:	8a 81       	ldd	r24, Y+2	; 0x02
     674:	28 2f       	mov	r18, r24
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	c9 01       	movw	r24, r18
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	8a 54       	subi	r24, 0x4A	; 74
     68c:	9f 4f       	sbci	r25, 0xFF	; 255
     68e:	fc 01       	movw	r30, r24
     690:	11 82       	std	Z+1, r1	; 0x01
     692:	10 82       	st	Z, r1
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	28 2f       	mov	r18, r24
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	c9 01       	movw	r24, r18
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	8e 54       	subi	r24, 0x4E	; 78
     6ae:	9f 4f       	sbci	r25, 0xFF	; 255
     6b0:	fc 01       	movw	r30, r24
     6b2:	10 82       	st	Z, r1
     6b4:	11 82       	std	Z+1, r1	; 0x01
     6b6:	12 82       	std	Z+2, r1	; 0x02
     6b8:	13 82       	std	Z+3, r1	; 0x03
     6ba:	8a 81       	ldd	r24, Y+2	; 0x02
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	8a 83       	std	Y+2, r24	; 0x02
     6c0:	8a 81       	ldd	r24, Y+2	; 0x02
     6c2:	85 30       	cpi	r24, 0x05	; 5
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <TMU_Init+0xfc>
     6c6:	b2 cf       	rjmp	.-156    	; 0x62c <TMU_Init+0x60>
     6c8:	83 ee       	ldi	r24, 0xE3	; 227
     6ca:	95 e0       	ldi	r25, 0x05	; 5
     6cc:	0e 94 3e 0b 	call	0x167c	; 0x167c <Timers_SetCallBack>
     6d0:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <gTimerNumber>
     6d4:	88 2f       	mov	r24, r24
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	91 05       	cpc	r25, r1
     6dc:	b1 f0       	breq	.+44     	; 0x70a <TMU_Init+0x13e>
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	91 05       	cpc	r25, r1
     6e2:	21 f1       	breq	.+72     	; 0x72c <TMU_Init+0x160>
     6e4:	89 2b       	or	r24, r25
     6e6:	99 f5       	brne	.+102    	; 0x74e <TMU_Init+0x182>
     6e8:	8e e6       	ldi	r24, 0x6E	; 110
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 43 08 	call	0x1086	; 0x1086 <Timers_Init>
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	ad 81       	ldd	r26, Y+5	; 0x05
     6f6:	be 81       	ldd	r27, Y+6	; 0x06
     6f8:	ac 01       	movw	r20, r24
     6fa:	bd 01       	movw	r22, r26
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 b6 09 	call	0x136c	; 0x136c <Timers_SetCounter>
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 00 0b 	call	0x1600	; 0x1600 <Timers_Start>
     708:	25 c0       	rjmp	.+74     	; 0x754 <TMU_Init+0x188>
     70a:	89 e7       	ldi	r24, 0x79	; 121
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 43 08 	call	0x1086	; 0x1086 <Timers_Init>
     712:	8b 81       	ldd	r24, Y+3	; 0x03
     714:	9c 81       	ldd	r25, Y+4	; 0x04
     716:	ad 81       	ldd	r26, Y+5	; 0x05
     718:	be 81       	ldd	r27, Y+6	; 0x06
     71a:	ac 01       	movw	r20, r24
     71c:	bd 01       	movw	r22, r26
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	0e 94 b6 09 	call	0x136c	; 0x136c <Timers_SetCounter>
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 00 0b 	call	0x1600	; 0x1600 <Timers_Start>
     72a:	14 c0       	rjmp	.+40     	; 0x754 <TMU_Init+0x188>
     72c:	84 e8       	ldi	r24, 0x84	; 132
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 43 08 	call	0x1086	; 0x1086 <Timers_Init>
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	ad 81       	ldd	r26, Y+5	; 0x05
     73a:	be 81       	ldd	r27, Y+6	; 0x06
     73c:	ac 01       	movw	r20, r24
     73e:	bd 01       	movw	r22, r26
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 b6 09 	call	0x136c	; 0x136c <Timers_SetCounter>
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	0e 94 00 0b 	call	0x1600	; 0x1600 <Timers_Start>
     74c:	03 c0       	rjmp	.+6      	; 0x754 <TMU_Init+0x188>
     74e:	85 e0       	ldi	r24, 0x05	; 5
     750:	89 83       	std	Y+1, r24	; 0x01
     752:	00 00       	nop
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	28 96       	adiw	r28, 0x08	; 8
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <TMU_Start_Timer>:
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	2b 97       	sbiw	r28, 0x0b	; 11
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	6b 83       	std	Y+3, r22	; 0x03
     782:	7c 83       	std	Y+4, r23	; 0x04
     784:	8d 83       	std	Y+5, r24	; 0x05
     786:	9e 83       	std	Y+6, r25	; 0x06
     788:	4f 83       	std	Y+7, r20	; 0x07
     78a:	39 87       	std	Y+9, r19	; 0x09
     78c:	28 87       	std	Y+8, r18	; 0x08
     78e:	1b 87       	std	Y+11, r17	; 0x0b
     790:	0a 87       	std	Y+10, r16	; 0x0a
     792:	19 82       	std	Y+1, r1	; 0x01
     794:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <gJobsCount>
     798:	86 30       	cpi	r24, 0x06	; 6
     79a:	18 f0       	brcs	.+6      	; 0x7a2 <TMU_Start_Timer+0x3a>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	16 c0       	rjmp	.+44     	; 0x7ce <TMU_Start_Timer+0x66>
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	ad 81       	ldd	r26, Y+5	; 0x05
     7a8:	be 81       	ldd	r27, Y+6	; 0x06
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	92 41       	sbci	r25, 0x12	; 18
     7ae:	aa 47       	sbci	r26, 0x7A	; 122
     7b0:	b1 05       	cpc	r27, r1
     7b2:	18 f0       	brcs	.+6      	; 0x7ba <TMU_Start_Timer+0x52>
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	0a c0       	rjmp	.+20     	; 0x7ce <TMU_Start_Timer+0x66>
     7ba:	8f 81       	ldd	r24, Y+7	; 0x07
     7bc:	88 23       	and	r24, r24
     7be:	31 f0       	breq	.+12     	; 0x7cc <TMU_Start_Timer+0x64>
     7c0:	8f 81       	ldd	r24, Y+7	; 0x07
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	19 f0       	breq	.+6      	; 0x7cc <TMU_Start_Timer+0x64>
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	89 83       	std	Y+1, r24	; 0x01
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <TMU_Start_Timer+0x66>
     7cc:	19 82       	std	Y+1, r1	; 0x01
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	88 23       	and	r24, r24
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <TMU_Start_Timer+0x6e>
     7d4:	88 c0       	rjmp	.+272    	; 0x8e6 <__stack+0x87>
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	8a 83       	std	Y+2, r24	; 0x02
     7da:	81 c0       	rjmp	.+258    	; 0x8de <__stack+0x7f>
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	28 2f       	mov	r18, r24
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	c9 01       	movw	r24, r18
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	82 0f       	add	r24, r18
     7ea:	93 1f       	adc	r25, r19
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	84 55       	subi	r24, 0x54	; 84
     7f6:	9f 4f       	sbci	r25, 0xFF	; 255
     7f8:	fc 01       	movw	r30, r24
     7fa:	80 81       	ld	r24, Z
     7fc:	88 23       	and	r24, r24
     7fe:	09 f0       	breq	.+2      	; 0x802 <TMU_Start_Timer+0x9a>
     800:	6b c0       	rjmp	.+214    	; 0x8d8 <__stack+0x79>
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	28 2f       	mov	r18, r24
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	c9 01       	movw	r24, r18
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	82 0f       	add	r24, r18
     810:	93 1f       	adc	r25, r19
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	84 55       	subi	r24, 0x54	; 84
     81c:	9f 4f       	sbci	r25, 0xFF	; 255
     81e:	2a 81       	ldd	r18, Y+2	; 0x02
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	28 2f       	mov	r18, r24
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	c9 01       	movw	r24, r18
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	83 55       	subi	r24, 0x53	; 83
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	2f 81       	ldd	r18, Y+7	; 0x07
     842:	fc 01       	movw	r30, r24
     844:	20 83       	st	Z, r18
     846:	8a 81       	ldd	r24, Y+2	; 0x02
     848:	28 2f       	mov	r18, r24
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	c9 01       	movw	r24, r18
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	82 0f       	add	r24, r18
     854:	93 1f       	adc	r25, r19
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	9c 01       	movw	r18, r24
     860:	22 55       	subi	r18, 0x52	; 82
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	8b 81       	ldd	r24, Y+3	; 0x03
     866:	9c 81       	ldd	r25, Y+4	; 0x04
     868:	ad 81       	ldd	r26, Y+5	; 0x05
     86a:	be 81       	ldd	r27, Y+6	; 0x06
     86c:	f9 01       	movw	r30, r18
     86e:	80 83       	st	Z, r24
     870:	91 83       	std	Z+1, r25	; 0x01
     872:	a2 83       	std	Z+2, r26	; 0x02
     874:	b3 83       	std	Z+3, r27	; 0x03
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	28 2f       	mov	r18, r24
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	c9 01       	movw	r24, r18
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	8a 54       	subi	r24, 0x4A	; 74
     890:	9f 4f       	sbci	r25, 0xFF	; 255
     892:	28 85       	ldd	r18, Y+8	; 0x08
     894:	39 85       	ldd	r19, Y+9	; 0x09
     896:	fc 01       	movw	r30, r24
     898:	31 83       	std	Z+1, r19	; 0x01
     89a:	20 83       	st	Z, r18
     89c:	8a 81       	ldd	r24, Y+2	; 0x02
     89e:	28 2f       	mov	r18, r24
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	c9 01       	movw	r24, r18
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	82 0f       	add	r24, r18
     8aa:	93 1f       	adc	r25, r19
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	8e 54       	subi	r24, 0x4E	; 78
     8b6:	9f 4f       	sbci	r25, 0xFF	; 255
     8b8:	fc 01       	movw	r30, r24
     8ba:	10 82       	st	Z, r1
     8bc:	11 82       	std	Z+1, r1	; 0x01
     8be:	12 82       	std	Z+2, r1	; 0x02
     8c0:	13 82       	std	Z+3, r1	; 0x03
     8c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     8c4:	9b 85       	ldd	r25, Y+11	; 0x0b
     8c6:	2a 81       	ldd	r18, Y+2	; 0x02
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 83       	st	Z, r18
     8cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <gJobsCount>
     8d0:	8f 5f       	subi	r24, 0xFF	; 255
     8d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <gJobsCount>
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <__stack+0x87>
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	8f 5f       	subi	r24, 0xFF	; 255
     8dc:	8a 83       	std	Y+2, r24	; 0x02
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	85 30       	cpi	r24, 0x05	; 5
     8e2:	08 f4       	brcc	.+2      	; 0x8e6 <__stack+0x87>
     8e4:	7b cf       	rjmp	.-266    	; 0x7dc <TMU_Start_Timer+0x74>
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	2b 96       	adiw	r28, 0x0b	; 11
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	08 95       	ret

000008fe <TMU_Stop_Timer>:
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	00 d0       	rcall	.+0      	; 0x904 <TMU_Stop_Timer+0x6>
     904:	00 d0       	rcall	.+0      	; 0x906 <TMU_Stop_Timer+0x8>
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	8c 83       	std	Y+4, r24	; 0x04
     90c:	19 82       	std	Y+1, r1	; 0x01
     90e:	1b 82       	std	Y+3, r1	; 0x03
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	8a 83       	std	Y+2, r24	; 0x02
     914:	76 c0       	rjmp	.+236    	; 0xa02 <TMU_Stop_Timer+0x104>
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	c9 01       	movw	r24, r18
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	82 0f       	add	r24, r18
     924:	93 1f       	adc	r25, r19
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	84 55       	subi	r24, 0x54	; 84
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	fc 01       	movw	r30, r24
     934:	90 81       	ld	r25, Z
     936:	8c 81       	ldd	r24, Y+4	; 0x04
     938:	98 17       	cp	r25, r24
     93a:	09 f0       	breq	.+2      	; 0x93e <TMU_Stop_Timer+0x40>
     93c:	5f c0       	rjmp	.+190    	; 0x9fc <TMU_Stop_Timer+0xfe>
     93e:	8a 81       	ldd	r24, Y+2	; 0x02
     940:	28 2f       	mov	r18, r24
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	c9 01       	movw	r24, r18
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	82 0f       	add	r24, r18
     94c:	93 1f       	adc	r25, r19
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	84 55       	subi	r24, 0x54	; 84
     958:	9f 4f       	sbci	r25, 0xFF	; 255
     95a:	fc 01       	movw	r30, r24
     95c:	10 82       	st	Z, r1
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	c9 01       	movw	r24, r18
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	82 0f       	add	r24, r18
     96c:	93 1f       	adc	r25, r19
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	83 55       	subi	r24, 0x53	; 83
     978:	9f 4f       	sbci	r25, 0xFF	; 255
     97a:	fc 01       	movw	r30, r24
     97c:	10 82       	st	Z, r1
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	28 2f       	mov	r18, r24
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	c9 01       	movw	r24, r18
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	82 0f       	add	r24, r18
     98c:	93 1f       	adc	r25, r19
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	82 55       	subi	r24, 0x52	; 82
     998:	9f 4f       	sbci	r25, 0xFF	; 255
     99a:	fc 01       	movw	r30, r24
     99c:	10 82       	st	Z, r1
     99e:	11 82       	std	Z+1, r1	; 0x01
     9a0:	12 82       	std	Z+2, r1	; 0x02
     9a2:	13 82       	std	Z+3, r1	; 0x03
     9a4:	8a 81       	ldd	r24, Y+2	; 0x02
     9a6:	28 2f       	mov	r18, r24
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	c9 01       	movw	r24, r18
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	82 0f       	add	r24, r18
     9b2:	93 1f       	adc	r25, r19
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	8e 54       	subi	r24, 0x4E	; 78
     9be:	9f 4f       	sbci	r25, 0xFF	; 255
     9c0:	fc 01       	movw	r30, r24
     9c2:	10 82       	st	Z, r1
     9c4:	11 82       	std	Z+1, r1	; 0x01
     9c6:	12 82       	std	Z+2, r1	; 0x02
     9c8:	13 82       	std	Z+3, r1	; 0x03
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	28 2f       	mov	r18, r24
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	c9 01       	movw	r24, r18
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	82 0f       	add	r24, r18
     9d8:	93 1f       	adc	r25, r19
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	8a 54       	subi	r24, 0x4A	; 74
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	fc 01       	movw	r30, r24
     9e8:	11 82       	std	Z+1, r1	; 0x01
     9ea:	10 82       	st	Z, r1
     9ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <gJobsCount>
     9f0:	81 50       	subi	r24, 0x01	; 1
     9f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <gJobsCount>
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	8b 83       	std	Y+3, r24	; 0x03
     9fa:	07 c0       	rjmp	.+14     	; 0xa0a <TMU_Stop_Timer+0x10c>
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	8f 5f       	subi	r24, 0xFF	; 255
     a00:	8a 83       	std	Y+2, r24	; 0x02
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	85 30       	cpi	r24, 0x05	; 5
     a06:	08 f4       	brcc	.+2      	; 0xa0a <TMU_Stop_Timer+0x10c>
     a08:	86 cf       	rjmp	.-244    	; 0x916 <TMU_Stop_Timer+0x18>
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	88 23       	and	r24, r24
     a0e:	11 f4       	brne	.+4      	; 0xa14 <TMU_Stop_Timer+0x116>
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	89 83       	std	Y+1, r24	; 0x01
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <TMU_Dispatcher>:
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	1f 92       	push	r1
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <gTimer_Flag>
     a32:	88 23       	and	r24, r24
     a34:	09 f4       	brne	.+2      	; 0xa38 <TMU_Dispatcher+0x14>
     a36:	c2 c0       	rjmp	.+388    	; 0xbbc <TMU_Dispatcher+0x198>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	a5 c0       	rjmp	.+330    	; 0xb88 <TMU_Dispatcher+0x164>
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	68 2f       	mov	r22, r24
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	28 2f       	mov	r18, r24
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	c9 01       	movw	r24, r18
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	82 0f       	add	r24, r18
     a52:	93 1f       	adc	r25, r19
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	8e 54       	subi	r24, 0x4E	; 78
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	a2 81       	ldd	r26, Z+2	; 0x02
     a68:	b3 81       	ldd	r27, Z+3	; 0x03
     a6a:	9c 01       	movw	r18, r24
     a6c:	ad 01       	movw	r20, r26
     a6e:	2f 5f       	subi	r18, 0xFF	; 255
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	cb 01       	movw	r24, r22
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	86 0f       	add	r24, r22
     a7e:	97 1f       	adc	r25, r23
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	8e 54       	subi	r24, 0x4E	; 78
     a8a:	9f 4f       	sbci	r25, 0xFF	; 255
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
     a90:	31 83       	std	Z+1, r19	; 0x01
     a92:	42 83       	std	Z+2, r20	; 0x02
     a94:	53 83       	std	Z+3, r21	; 0x03
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	28 2f       	mov	r18, r24
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	c9 01       	movw	r24, r18
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	82 0f       	add	r24, r18
     aa4:	93 1f       	adc	r25, r19
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	8e 54       	subi	r24, 0x4E	; 78
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	fc 01       	movw	r30, r24
     ab4:	20 81       	ld	r18, Z
     ab6:	31 81       	ldd	r19, Z+1	; 0x01
     ab8:	42 81       	ldd	r20, Z+2	; 0x02
     aba:	53 81       	ldd	r21, Z+3	; 0x03
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	68 2f       	mov	r22, r24
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	cb 01       	movw	r24, r22
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	86 0f       	add	r24, r22
     aca:	97 1f       	adc	r25, r23
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	82 55       	subi	r24, 0x52	; 82
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
     ad8:	fc 01       	movw	r30, r24
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	a2 81       	ldd	r26, Z+2	; 0x02
     ae0:	b3 81       	ldd	r27, Z+3	; 0x03
     ae2:	28 17       	cp	r18, r24
     ae4:	39 07       	cpc	r19, r25
     ae6:	4a 07       	cpc	r20, r26
     ae8:	5b 07       	cpc	r21, r27
     aea:	09 f0       	breq	.+2      	; 0xaee <TMU_Dispatcher+0xca>
     aec:	4a c0       	rjmp	.+148    	; 0xb82 <TMU_Dispatcher+0x15e>
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	28 2f       	mov	r18, r24
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	c9 01       	movw	r24, r18
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	82 0f       	add	r24, r18
     afc:	93 1f       	adc	r25, r19
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	8a 54       	subi	r24, 0x4A	; 74
     b08:	9f 4f       	sbci	r25, 0xFF	; 255
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	fc 01       	movw	r30, r24
     b12:	09 95       	icall
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	28 2f       	mov	r18, r24
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	c9 01       	movw	r24, r18
     b1c:	88 0f       	add	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	82 0f       	add	r24, r18
     b22:	93 1f       	adc	r25, r19
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	8e 54       	subi	r24, 0x4E	; 78
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	fc 01       	movw	r30, r24
     b32:	10 82       	st	Z, r1
     b34:	11 82       	std	Z+1, r1	; 0x01
     b36:	12 82       	std	Z+2, r1	; 0x02
     b38:	13 82       	std	Z+3, r1	; 0x03
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	28 2f       	mov	r18, r24
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	c9 01       	movw	r24, r18
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	82 0f       	add	r24, r18
     b48:	93 1f       	adc	r25, r19
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	83 55       	subi	r24, 0x53	; 83
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	fc 01       	movw	r30, r24
     b58:	80 81       	ld	r24, Z
     b5a:	88 23       	and	r24, r24
     b5c:	91 f4       	brne	.+36     	; 0xb82 <TMU_Dispatcher+0x15e>
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	c9 01       	movw	r24, r18
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	82 0f       	add	r24, r18
     b6c:	93 1f       	adc	r25, r19
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	84 55       	subi	r24, 0x54	; 84
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	fc 01       	movw	r30, r24
     b7c:	80 81       	ld	r24, Z
     b7e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <TMU_Stop_Timer>
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <gJobsCount>
     b8c:	99 81       	ldd	r25, Y+1	; 0x01
     b8e:	89 17       	cp	r24, r25
     b90:	98 f0       	brcs	.+38     	; 0xbb8 <TMU_Dispatcher+0x194>
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	c9 01       	movw	r24, r18
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	82 0f       	add	r24, r18
     ba0:	93 1f       	adc	r25, r19
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	84 55       	subi	r24, 0x54	; 84
     bac:	9f 4f       	sbci	r25, 0xFF	; 255
     bae:	fc 01       	movw	r30, r24
     bb0:	80 81       	ld	r24, Z
     bb2:	88 23       	and	r24, r24
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <TMU_Dispatcher+0x194>
     bb6:	43 cf       	rjmp	.-378    	; 0xa3e <TMU_Dispatcher+0x1a>
     bb8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <gTimer_Flag>
     bbc:	00 00       	nop
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <TMU_SetCallBkFunction>:
 * Function : TMU_SetCallBkFunction
 * Description: This function is used to set the Call Back Function in the TMU
 * @return void
 */
void TMU_SetCallBkFunction(void)
{
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	gTimer_Flag = TRUE;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <gTimer_Flag>
     bd4:	00 00       	nop
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <Task1>:
#include "Interrupts.h"
#include "Led.h"
#include <avr/sleep.h>

void Task1(void)
{
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
	Led_Tog(LED0);
     be4:	80 e1       	ldi	r24, 0x10	; 16
     be6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Led_Tog>
}
     bea:	00 00       	nop
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <Task2>:

void Task2(void)
{
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
	Led_Tog(LED1);
     bfa:	80 e2       	ldi	r24, 0x20	; 32
     bfc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Led_Tog>
}
     c00:	00 00       	nop
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <Task3>:

void Task3(void)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62

}
     c10:	00 00       	nop
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	08 95       	ret

00000c18 <Task4>:

void Task4(void)
{
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
	
}
     c20:	00 00       	nop
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <main>:

#define ARRAY_SIZE 1000
uint8 arr[ARRAY_SIZE];

int main(void)
{
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	00 d0       	rcall	.+0      	; 0xc32 <main+0xa>
     c32:	00 d0       	rcall	.+0      	; 0xc34 <main+0xc>
     c34:	1f 92       	push	r1
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
	uint16 index;
	for(index = 0; index < ARRAY_SIZE ; index++)
     c3a:	1a 82       	std	Y+2, r1	; 0x02
     c3c:	19 82       	std	Y+1, r1	; 0x01
     c3e:	0c c0       	rjmp	.+24     	; 0xc58 <main+0x30>
	{
		arr[index] = 'M';
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	8b 50       	subi	r24, 0x0B	; 11
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	2d e4       	ldi	r18, 0x4D	; 77
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 83       	st	Z, r18
uint8 arr[ARRAY_SIZE];

int main(void)
{
	uint16 index;
	for(index = 0; index < ARRAY_SIZE ; index++)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	88 3e       	cpi	r24, 0xE8	; 232
     c5e:	93 40       	sbci	r25, 0x03	; 3
     c60:	78 f3       	brcs	.-34     	; 0xc40 <main+0x18>
	{
		arr[index] = 'M';
	}
	
	Led_Init(LED0);
     c62:	80 e1       	ldi	r24, 0x10	; 16
     c64:	0e 94 49 00 	call	0x92	; 0x92 <Led_Init>
	Led_Init(LED1);
     c68:	80 e2       	ldi	r24, 0x20	; 32
     c6a:	0e 94 49 00 	call	0x92	; 0x92 <Led_Init>
	Led_Init(LED2);
     c6e:	80 e4       	ldi	r24, 0x40	; 64
     c70:	0e 94 49 00 	call	0x92	; 0x92 <Led_Init>
	Led_Init(LED3);
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	0e 94 49 00 	call	0x92	; 0x92 <Led_Init>
	
	BCM_Init(Task1);
     c7a:	8e ee       	ldi	r24, 0xEE	; 238
     c7c:	95 e0       	ldi	r25, 0x05	; 5
     c7e:	0e 94 31 01 	call	0x262	; 0x262 <BCM_Init>
	/* Setting the Tx_Buffer to send 120 char */
	BCM_Tx_SetupBuffer(arr,ARRAY_SIZE);
     c82:	68 ee       	ldi	r22, 0xE8	; 232
     c84:	73 e0       	ldi	r23, 0x03	; 3
     c86:	85 ef       	ldi	r24, 0xF5	; 245
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <BCM_Tx_SetupBuffer>
	
	uint8 job_ID0,job_ID1,job_ID2;
	TMU_Init(&tmu_cfg_s);
     c8e:	89 e6       	ldi	r24, 0x69	; 105
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 e6 02 	call	0x5cc	; 0x5cc <TMU_Init>
	/* Start 3 Tmu Jobs */
	TMU_Start_Timer(10,JOB_PERIODIC,Task2,&job_ID0);
     c96:	ce 01       	movw	r24, r28
     c98:	03 96       	adiw	r24, 0x03	; 3
     c9a:	8c 01       	movw	r16, r24
     c9c:	29 ef       	ldi	r18, 0xF9	; 249
     c9e:	35 e0       	ldi	r19, 0x05	; 5
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	6a e0       	ldi	r22, 0x0A	; 10
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 b4 03 	call	0x768	; 0x768 <TMU_Start_Timer>
	TMU_Start_Timer(100,JOB_PERIODIC,Task3,&job_ID1);
     cae:	ce 01       	movw	r24, r28
     cb0:	04 96       	adiw	r24, 0x04	; 4
     cb2:	8c 01       	movw	r16, r24
     cb4:	24 e0       	ldi	r18, 0x04	; 4
     cb6:	36 e0       	ldi	r19, 0x06	; 6
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	64 e6       	ldi	r22, 0x64	; 100
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 b4 03 	call	0x768	; 0x768 <TMU_Start_Timer>
	TMU_Start_Timer(500,JOB_PERIODIC,Task4,&job_ID2);
     cc6:	ce 01       	movw	r24, r28
     cc8:	05 96       	adiw	r24, 0x05	; 5
     cca:	8c 01       	movw	r16, r24
     ccc:	2c e0       	ldi	r18, 0x0C	; 12
     cce:	36 e0       	ldi	r19, 0x06	; 6
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	64 ef       	ldi	r22, 0xF4	; 244
     cd4:	71 e0       	ldi	r23, 0x01	; 1
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 b4 03 	call	0x768	; 0x768 <TMU_Start_Timer>
	
	set_sleep_mode(SLEEP_MODE_IDLE);
     cde:	85 e5       	ldi	r24, 0x55	; 85
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	25 e5       	ldi	r18, 0x55	; 85
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	f9 01       	movw	r30, r18
     ce8:	20 81       	ld	r18, Z
     cea:	2f 78       	andi	r18, 0x8F	; 143
     cec:	fc 01       	movw	r30, r24
     cee:	20 83       	st	Z, r18
    while (TRUE) 
    {
		/* Led3 to indicate the Full Time of the while loop */
		Led_On(LED3); 
     cf0:	80 e8       	ldi	r24, 0x80	; 128
     cf2:	0e 94 93 00 	call	0x126	; 0x126 <Led_On>
		
		/* Led2 to indicate the time of the Dispatchers */
		Led_On(LED2);
     cf6:	80 e4       	ldi	r24, 0x40	; 64
     cf8:	0e 94 93 00 	call	0x126	; 0x126 <Led_On>
		BCM_TxDispatcher();
     cfc:	0e 94 1d 02 	call	0x43a	; 0x43a <BCM_TxDispatcher>
		TMU_Dispatcher();
     d00:	0e 94 12 05 	call	0xa24	; 0xa24 <TMU_Dispatcher>
		Led_Off(LED2);
     d04:	80 e4       	ldi	r24, 0x40	; 64
     d06:	0e 94 c9 00 	call	0x192	; 0x192 <Led_Off>
		
		/* Start the sleep mode */
		sleep_mode();
     d0a:	85 e5       	ldi	r24, 0x55	; 85
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	25 e5       	ldi	r18, 0x55	; 85
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	f9 01       	movw	r30, r18
     d14:	20 81       	ld	r18, Z
     d16:	20 68       	ori	r18, 0x80	; 128
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18
     d1c:	88 95       	sleep
     d1e:	85 e5       	ldi	r24, 0x55	; 85
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	25 e5       	ldi	r18, 0x55	; 85
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	f9 01       	movw	r30, r18
     d28:	20 81       	ld	r18, Z
     d2a:	2f 77       	andi	r18, 0x7F	; 127
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
		Led_Off(LED3);
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	0e 94 c9 00 	call	0x192	; 0x192 <Led_Off>
    }
     d36:	dc cf       	rjmp	.-72     	; 0xcf0 <main+0xc8>

00000d38 <Gpio_PinDirection>:
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * @param direction : The Direction of the PIN >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_PinDirection(uint8 port, uint8 pins, uint8 direction)
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <Gpio_PinDirection+0x6>
     d3e:	1f 92       	push	r1
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	6a 83       	std	Y+2, r22	; 0x02
     d48:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	91 05       	cpc	r25, r1
     d54:	81 f1       	breq	.+96     	; 0xdb6 <Gpio_PinDirection+0x7e>
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	91 05       	cpc	r25, r1
     d5a:	1c f4       	brge	.+6      	; 0xd62 <Gpio_PinDirection+0x2a>
     d5c:	89 2b       	or	r24, r25
     d5e:	49 f0       	breq	.+18     	; 0xd72 <Gpio_PinDirection+0x3a>
				break;
			}
		}
		break;
	}
}
     d60:	90 c0       	rjmp	.+288    	; 0xe82 <Gpio_PinDirection+0x14a>
 * @param direction : The Direction of the PIN >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_PinDirection(uint8 port, uint8 pins, uint8 direction)
{
	switch(port)
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	91 05       	cpc	r25, r1
     d66:	09 f4       	brne	.+2      	; 0xd6a <Gpio_PinDirection+0x32>
     d68:	48 c0       	rjmp	.+144    	; 0xdfa <Gpio_PinDirection+0xc2>
     d6a:	03 97       	sbiw	r24, 0x03	; 3
     d6c:	09 f4       	brne	.+2      	; 0xd70 <Gpio_PinDirection+0x38>
     d6e:	67 c0       	rjmp	.+206    	; 0xe3e <Gpio_PinDirection+0x106>
				break;
			}
		}
		break;
	}
}
     d70:	88 c0       	rjmp	.+272    	; 0xe82 <Gpio_PinDirection+0x14a>
{
	switch(port)
	{
		case MYPORTA :
		{
		switch(direction)
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	21 f0       	breq	.+8      	; 0xd84 <Gpio_PinDirection+0x4c>
     d7c:	8f 3f       	cpi	r24, 0xFF	; 255
     d7e:	91 05       	cpc	r25, r1
     d80:	71 f0       	breq	.+28     	; 0xd9e <Gpio_PinDirection+0x66>
		case SET_OUT : 
		DDR_A |= (pins);
		break;
		}
		}
		break;
     d82:	7f c0       	rjmp	.+254    	; 0xe82 <Gpio_PinDirection+0x14a>
		case MYPORTA :
		{
		switch(direction)
		{
		case SET_IN : 
		DDR_A &= ~(pins);
     d84:	8a e3       	ldi	r24, 0x3A	; 58
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	2a e3       	ldi	r18, 0x3A	; 58
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	f9 01       	movw	r30, r18
     d8e:	20 81       	ld	r18, Z
     d90:	32 2f       	mov	r19, r18
     d92:	2a 81       	ldd	r18, Y+2	; 0x02
     d94:	20 95       	com	r18
     d96:	23 23       	and	r18, r19
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18
		break;
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <Gpio_PinDirection+0x7c>
		case SET_OUT : 
		DDR_A |= (pins);
     d9e:	8a e3       	ldi	r24, 0x3A	; 58
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	2a e3       	ldi	r18, 0x3A	; 58
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	f9 01       	movw	r30, r18
     da8:	30 81       	ld	r19, Z
     daa:	2a 81       	ldd	r18, Y+2	; 0x02
     dac:	23 2b       	or	r18, r19
     dae:	fc 01       	movw	r30, r24
     db0:	20 83       	st	Z, r18
		break;
     db2:	00 00       	nop
		}
		}
		break;
     db4:	66 c0       	rjmp	.+204    	; 0xe82 <Gpio_PinDirection+0x14a>
		
		case MYPORTB :
		{
		switch(direction)
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	21 f0       	breq	.+8      	; 0xdc8 <Gpio_PinDirection+0x90>
     dc0:	8f 3f       	cpi	r24, 0xFF	; 255
     dc2:	91 05       	cpc	r25, r1
     dc4:	71 f0       	breq	.+28     	; 0xde2 <Gpio_PinDirection+0xaa>
		case SET_OUT :
			DDR_B |= (pins);
			break;
		}
		}
		break;
     dc6:	5d c0       	rjmp	.+186    	; 0xe82 <Gpio_PinDirection+0x14a>
		case MYPORTB :
		{
		switch(direction)
		{
		case SET_IN :
			DDR_B &= ~(pins);
     dc8:	87 e3       	ldi	r24, 0x37	; 55
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	27 e3       	ldi	r18, 0x37	; 55
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	f9 01       	movw	r30, r18
     dd2:	20 81       	ld	r18, Z
     dd4:	32 2f       	mov	r19, r18
     dd6:	2a 81       	ldd	r18, Y+2	; 0x02
     dd8:	20 95       	com	r18
     dda:	23 23       	and	r18, r19
     ddc:	fc 01       	movw	r30, r24
     dde:	20 83       	st	Z, r18
			break;
     de0:	0b c0       	rjmp	.+22     	; 0xdf8 <Gpio_PinDirection+0xc0>
		case SET_OUT :
			DDR_B |= (pins);
     de2:	87 e3       	ldi	r24, 0x37	; 55
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	27 e3       	ldi	r18, 0x37	; 55
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	f9 01       	movw	r30, r18
     dec:	30 81       	ld	r19, Z
     dee:	2a 81       	ldd	r18, Y+2	; 0x02
     df0:	23 2b       	or	r18, r19
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18
			break;
     df6:	00 00       	nop
		}
		}
		break;
     df8:	44 c0       	rjmp	.+136    	; 0xe82 <Gpio_PinDirection+0x14a>
		case MYPORTC :
		{
			switch(direction)
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	21 f0       	breq	.+8      	; 0xe0c <Gpio_PinDirection+0xd4>
     e04:	8f 3f       	cpi	r24, 0xFF	; 255
     e06:	91 05       	cpc	r25, r1
     e08:	71 f0       	breq	.+28     	; 0xe26 <Gpio_PinDirection+0xee>
				case SET_OUT :
				DDR_C |= (pins);
				break;
			}
		}
		break;
     e0a:	3b c0       	rjmp	.+118    	; 0xe82 <Gpio_PinDirection+0x14a>
		case MYPORTC :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_C &= ~(pins);
     e0c:	84 e3       	ldi	r24, 0x34	; 52
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	24 e3       	ldi	r18, 0x34	; 52
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	f9 01       	movw	r30, r18
     e16:	20 81       	ld	r18, Z
     e18:	32 2f       	mov	r19, r18
     e1a:	2a 81       	ldd	r18, Y+2	; 0x02
     e1c:	20 95       	com	r18
     e1e:	23 23       	and	r18, r19
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18
				break;
     e24:	0b c0       	rjmp	.+22     	; 0xe3c <Gpio_PinDirection+0x104>
				case SET_OUT :
				DDR_C |= (pins);
     e26:	84 e3       	ldi	r24, 0x34	; 52
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	24 e3       	ldi	r18, 0x34	; 52
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	f9 01       	movw	r30, r18
     e30:	30 81       	ld	r19, Z
     e32:	2a 81       	ldd	r18, Y+2	; 0x02
     e34:	23 2b       	or	r18, r19
     e36:	fc 01       	movw	r30, r24
     e38:	20 83       	st	Z, r18
				break;
     e3a:	00 00       	nop
			}
		}
		break;
     e3c:	22 c0       	rjmp	.+68     	; 0xe82 <Gpio_PinDirection+0x14a>
		case MYPORTD :
		{
			switch(direction)
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	21 f0       	breq	.+8      	; 0xe50 <Gpio_PinDirection+0x118>
     e48:	8f 3f       	cpi	r24, 0xFF	; 255
     e4a:	91 05       	cpc	r25, r1
     e4c:	71 f0       	breq	.+28     	; 0xe6a <Gpio_PinDirection+0x132>
				case SET_OUT :
				DDR_D |= (pins);
				break;
			}
		}
		break;
     e4e:	18 c0       	rjmp	.+48     	; 0xe80 <Gpio_PinDirection+0x148>
		case MYPORTD :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_D &= ~(pins);
     e50:	81 e3       	ldi	r24, 0x31	; 49
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	21 e3       	ldi	r18, 0x31	; 49
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	f9 01       	movw	r30, r18
     e5a:	20 81       	ld	r18, Z
     e5c:	32 2f       	mov	r19, r18
     e5e:	2a 81       	ldd	r18, Y+2	; 0x02
     e60:	20 95       	com	r18
     e62:	23 23       	and	r18, r19
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
				break;
     e68:	0b c0       	rjmp	.+22     	; 0xe80 <Gpio_PinDirection+0x148>
				case SET_OUT :
				DDR_D |= (pins);
     e6a:	81 e3       	ldi	r24, 0x31	; 49
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	21 e3       	ldi	r18, 0x31	; 49
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	f9 01       	movw	r30, r18
     e74:	30 81       	ld	r19, Z
     e76:	2a 81       	ldd	r18, Y+2	; 0x02
     e78:	23 2b       	or	r18, r19
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 83       	st	Z, r18
				break;
     e7e:	00 00       	nop
			}
		}
		break;
     e80:	00 00       	nop
	}
}
     e82:	00 00       	nop
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <Gpio_PinWrite>:
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * @param value : The value of the PIN >> {HIGH , LOW}
 * Return : void
 */
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	00 d0       	rcall	.+0      	; 0xe96 <Gpio_PinWrite+0x6>
     e96:	1f 92       	push	r1
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	6a 83       	std	Y+2, r22	; 0x02
     ea0:	4b 83       	std	Y+3, r20	; 0x03
	switch(value)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	09 f4       	brne	.+2      	; 0xeae <Gpio_PinWrite+0x1e>
     eac:	42 c0       	rjmp	.+132    	; 0xf32 <Gpio_PinWrite+0xa2>
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <Gpio_PinWrite+0x24>
			PORT_D &= ~(pins);
			break;
		}
		break;	
	}
}
     eb2:	86 c0       	rjmp	.+268    	; 0xfc0 <Gpio_PinWrite+0x130>
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
	{
		case HIGH:
			switch(port)
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	b9 f0       	breq	.+46     	; 0xeee <Gpio_PinWrite+0x5e>
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	91 05       	cpc	r25, r1
     ec4:	1c f4       	brge	.+6      	; 0xecc <Gpio_PinWrite+0x3c>
     ec6:	89 2b       	or	r24, r25
     ec8:	39 f0       	breq	.+14     	; 0xed8 <Gpio_PinWrite+0x48>
						break;
					case MYPORTD :
						PORT_D |= (pins);
						break;
		}
		break;
     eca:	7a c0       	rjmp	.+244    	; 0xfc0 <Gpio_PinWrite+0x130>
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
	{
		case HIGH:
			switch(port)
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	91 05       	cpc	r25, r1
     ed0:	c9 f0       	breq	.+50     	; 0xf04 <Gpio_PinWrite+0x74>
     ed2:	03 97       	sbiw	r24, 0x03	; 3
     ed4:	11 f1       	breq	.+68     	; 0xf1a <Gpio_PinWrite+0x8a>
						break;
					case MYPORTD :
						PORT_D |= (pins);
						break;
		}
		break;
     ed6:	74 c0       	rjmp	.+232    	; 0xfc0 <Gpio_PinWrite+0x130>
	{
		case HIGH:
			switch(port)
			{
					case MYPORTA :
						PORT_A |= (pins);
     ed8:	8b e3       	ldi	r24, 0x3B	; 59
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	2b e3       	ldi	r18, 0x3B	; 59
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	f9 01       	movw	r30, r18
     ee2:	30 81       	ld	r19, Z
     ee4:	2a 81       	ldd	r18, Y+2	; 0x02
     ee6:	23 2b       	or	r18, r19
     ee8:	fc 01       	movw	r30, r24
     eea:	20 83       	st	Z, r18
						break;
     eec:	21 c0       	rjmp	.+66     	; 0xf30 <Gpio_PinWrite+0xa0>
					case MYPORTB :
						PORT_B |= (pins);
     eee:	88 e3       	ldi	r24, 0x38	; 56
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	28 e3       	ldi	r18, 0x38	; 56
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	f9 01       	movw	r30, r18
     ef8:	30 81       	ld	r19, Z
     efa:	2a 81       	ldd	r18, Y+2	; 0x02
     efc:	23 2b       	or	r18, r19
     efe:	fc 01       	movw	r30, r24
     f00:	20 83       	st	Z, r18
						break;
     f02:	16 c0       	rjmp	.+44     	; 0xf30 <Gpio_PinWrite+0xa0>
					case MYPORTC :
						PORT_C |= (pins);
     f04:	85 e3       	ldi	r24, 0x35	; 53
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	25 e3       	ldi	r18, 0x35	; 53
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	f9 01       	movw	r30, r18
     f0e:	30 81       	ld	r19, Z
     f10:	2a 81       	ldd	r18, Y+2	; 0x02
     f12:	23 2b       	or	r18, r19
     f14:	fc 01       	movw	r30, r24
     f16:	20 83       	st	Z, r18
						break;
     f18:	0b c0       	rjmp	.+22     	; 0xf30 <Gpio_PinWrite+0xa0>
					case MYPORTD :
						PORT_D |= (pins);
     f1a:	82 e3       	ldi	r24, 0x32	; 50
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	22 e3       	ldi	r18, 0x32	; 50
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	f9 01       	movw	r30, r18
     f24:	30 81       	ld	r19, Z
     f26:	2a 81       	ldd	r18, Y+2	; 0x02
     f28:	23 2b       	or	r18, r19
     f2a:	fc 01       	movw	r30, r24
     f2c:	20 83       	st	Z, r18
						break;
     f2e:	00 00       	nop
		}
		break;
     f30:	47 c0       	rjmp	.+142    	; 0xfc0 <Gpio_PinWrite+0x130>
		
		case LOW : 
		switch(port)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 05       	cpc	r25, r1
     f3c:	c9 f0       	breq	.+50     	; 0xf70 <Gpio_PinWrite+0xe0>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	91 05       	cpc	r25, r1
     f42:	1c f4       	brge	.+6      	; 0xf4a <Gpio_PinWrite+0xba>
     f44:	89 2b       	or	r24, r25
     f46:	39 f0       	breq	.+14     	; 0xf56 <Gpio_PinWrite+0xc6>
			break;
			case MYPORTD :
			PORT_D &= ~(pins);
			break;
		}
		break;	
     f48:	3a c0       	rjmp	.+116    	; 0xfbe <Gpio_PinWrite+0x12e>
						break;
		}
		break;
		
		case LOW : 
		switch(port)
     f4a:	82 30       	cpi	r24, 0x02	; 2
     f4c:	91 05       	cpc	r25, r1
     f4e:	e9 f0       	breq	.+58     	; 0xf8a <Gpio_PinWrite+0xfa>
     f50:	03 97       	sbiw	r24, 0x03	; 3
     f52:	41 f1       	breq	.+80     	; 0xfa4 <Gpio_PinWrite+0x114>
			break;
			case MYPORTD :
			PORT_D &= ~(pins);
			break;
		}
		break;	
     f54:	34 c0       	rjmp	.+104    	; 0xfbe <Gpio_PinWrite+0x12e>
		
		case LOW : 
		switch(port)
		{
			case MYPORTA :
			PORT_A &= ~(pins);
     f56:	8b e3       	ldi	r24, 0x3B	; 59
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	2b e3       	ldi	r18, 0x3B	; 59
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	32 2f       	mov	r19, r18
     f64:	2a 81       	ldd	r18, Y+2	; 0x02
     f66:	20 95       	com	r18
     f68:	23 23       	and	r18, r19
     f6a:	fc 01       	movw	r30, r24
     f6c:	20 83       	st	Z, r18
			break;
     f6e:	27 c0       	rjmp	.+78     	; 0xfbe <Gpio_PinWrite+0x12e>
			case MYPORTB :
			PORT_B &= ~(pins);
     f70:	88 e3       	ldi	r24, 0x38	; 56
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	28 e3       	ldi	r18, 0x38	; 56
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	f9 01       	movw	r30, r18
     f7a:	20 81       	ld	r18, Z
     f7c:	32 2f       	mov	r19, r18
     f7e:	2a 81       	ldd	r18, Y+2	; 0x02
     f80:	20 95       	com	r18
     f82:	23 23       	and	r18, r19
     f84:	fc 01       	movw	r30, r24
     f86:	20 83       	st	Z, r18
			break;
     f88:	1a c0       	rjmp	.+52     	; 0xfbe <Gpio_PinWrite+0x12e>
			case MYPORTC :
			PORT_C &= ~(pins);
     f8a:	85 e3       	ldi	r24, 0x35	; 53
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	25 e3       	ldi	r18, 0x35	; 53
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	f9 01       	movw	r30, r18
     f94:	20 81       	ld	r18, Z
     f96:	32 2f       	mov	r19, r18
     f98:	2a 81       	ldd	r18, Y+2	; 0x02
     f9a:	20 95       	com	r18
     f9c:	23 23       	and	r18, r19
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
			break;
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <Gpio_PinWrite+0x12e>
			case MYPORTD :
			PORT_D &= ~(pins);
     fa4:	82 e3       	ldi	r24, 0x32	; 50
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	22 e3       	ldi	r18, 0x32	; 50
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	f9 01       	movw	r30, r18
     fae:	20 81       	ld	r18, Z
     fb0:	32 2f       	mov	r19, r18
     fb2:	2a 81       	ldd	r18, Y+2	; 0x02
     fb4:	20 95       	com	r18
     fb6:	23 23       	and	r18, r19
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18
			break;
     fbc:	00 00       	nop
		}
		break;	
     fbe:	00 00       	nop
	}
}
     fc0:	00 00       	nop
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <Gpio_PinToggle>:
 * @param port : the port that includes the pin {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * Return : void
 */
void Gpio_PinToggle(uint8 port, uint8 pins)
{
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <Gpio_PinToggle+0x6>
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	91 05       	cpc	r25, r1
     fe6:	b9 f0       	breq	.+46     	; 0x1016 <Gpio_PinToggle+0x48>
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	91 05       	cpc	r25, r1
     fec:	1c f4       	brge	.+6      	; 0xff4 <Gpio_PinToggle+0x26>
     fee:	89 2b       	or	r24, r25
     ff0:	39 f0       	breq	.+14     	; 0x1000 <Gpio_PinToggle+0x32>
		break;
		case MYPORTD :
		PORT_D ^= (pins);
		break;
	}
}
     ff2:	32 c0       	rjmp	.+100    	; 0x1058 <Gpio_PinToggle+0x8a>
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * Return : void
 */
void Gpio_PinToggle(uint8 port, uint8 pins)
{
	switch(port)
     ff4:	82 30       	cpi	r24, 0x02	; 2
     ff6:	91 05       	cpc	r25, r1
     ff8:	c9 f0       	breq	.+50     	; 0x102c <Gpio_PinToggle+0x5e>
     ffa:	03 97       	sbiw	r24, 0x03	; 3
     ffc:	11 f1       	breq	.+68     	; 0x1042 <Gpio_PinToggle+0x74>
		break;
		case MYPORTD :
		PORT_D ^= (pins);
		break;
	}
}
     ffe:	2c c0       	rjmp	.+88     	; 0x1058 <Gpio_PinToggle+0x8a>
void Gpio_PinToggle(uint8 port, uint8 pins)
{
	switch(port)
	{
		case MYPORTA :
		PORT_A ^= (pins);
    1000:	8b e3       	ldi	r24, 0x3B	; 59
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	2b e3       	ldi	r18, 0x3B	; 59
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	f9 01       	movw	r30, r18
    100a:	30 81       	ld	r19, Z
    100c:	2a 81       	ldd	r18, Y+2	; 0x02
    100e:	23 27       	eor	r18, r19
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
		break;
    1014:	21 c0       	rjmp	.+66     	; 0x1058 <Gpio_PinToggle+0x8a>
		case MYPORTB :
		PORT_B ^= (pins);
    1016:	88 e3       	ldi	r24, 0x38	; 56
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	28 e3       	ldi	r18, 0x38	; 56
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	30 81       	ld	r19, Z
    1022:	2a 81       	ldd	r18, Y+2	; 0x02
    1024:	23 27       	eor	r18, r19
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
		break;
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <Gpio_PinToggle+0x8a>
		case MYPORTC :
		PORT_C ^= (pins);
    102c:	85 e3       	ldi	r24, 0x35	; 53
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	25 e3       	ldi	r18, 0x35	; 53
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	f9 01       	movw	r30, r18
    1036:	30 81       	ld	r19, Z
    1038:	2a 81       	ldd	r18, Y+2	; 0x02
    103a:	23 27       	eor	r18, r19
    103c:	fc 01       	movw	r30, r24
    103e:	20 83       	st	Z, r18
		break;
    1040:	0b c0       	rjmp	.+22     	; 0x1058 <Gpio_PinToggle+0x8a>
		case MYPORTD :
		PORT_D ^= (pins);
    1042:	82 e3       	ldi	r24, 0x32	; 50
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	22 e3       	ldi	r18, 0x32	; 50
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	f9 01       	movw	r30, r18
    104c:	30 81       	ld	r19, Z
    104e:	2a 81       	ldd	r18, Y+2	; 0x02
    1050:	23 27       	eor	r18, r19
    1052:	fc 01       	movw	r30, r24
    1054:	20 83       	st	Z, r18
		break;
    1056:	00 00       	nop
	}
}
    1058:	00 00       	nop
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <Interrupts_On>:
 * Description : This function is used to turn On the global interrupt mask
 * Return : the function Returns nothing
 */

void Interrupts_On(void)
{     
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
    106c:	8f e5       	ldi	r24, 0x5F	; 95
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	2f e5       	ldi	r18, 0x5F	; 95
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	f9 01       	movw	r30, r18
    1076:	20 81       	ld	r18, Z
    1078:	20 68       	ori	r18, 0x80	; 128
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
}
    107e:	00 00       	nop
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <Timers_Init>:
	{
		Gpio_PinWrite(SWPWM_2_PORT,SWPWM_2_PIN,TRUE);
		Timers_timer2_Delay_ns(time_On_ns);
		Gpio_PinWrite(SWPWM_2_PORT,SWPWM_2_PIN,FALSE);
		Timers_timer2_Delay_ns(time_Off_ns);
	}
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	00 d0       	rcall	.+0      	; 0x108c <Timers_Init+0x6>
    108c:	1f 92       	push	r1
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9b 83       	std	Y+3, r25	; 0x03
    1094:	8a 83       	std	Y+2, r24	; 0x02
    1096:	19 82       	std	Y+1, r1	; 0x01
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	fc 01       	movw	r30, r24
    109e:	87 81       	ldd	r24, Z+7	; 0x07
    10a0:	90 85       	ldd	r25, Z+8	; 0x08
    10a2:	a1 85       	ldd	r26, Z+9	; 0x09
    10a4:	b2 85       	ldd	r27, Z+10	; 0x0a
    10a6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <Gv_F_CPU>
    10aa:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <Gv_F_CPU+0x1>
    10ae:	a0 93 ed 00 	sts	0x00ED, r26	; 0x8000ed <Gv_F_CPU+0x2>
    10b2:	b0 93 ee 00 	sts	0x00EE, r27	; 0x8000ee <Gv_F_CPU+0x3>
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	fc 01       	movw	r30, r24
    10bc:	80 81       	ld	r24, Z
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <Timers_Init+0x44>
    10c8:	64 c0       	rjmp	.+200    	; 0x1192 <Timers_Init+0x10c>
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <Timers_Init+0x4c>
    10d0:	cc c0       	rjmp	.+408    	; 0x126a <Timers_Init+0x1e4>
    10d2:	89 2b       	or	r24, r25
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <Timers_Init+0x52>
    10d6:	26 c1       	rjmp	.+588    	; 0x1324 <Timers_Init+0x29e>
    10d8:	83 e5       	ldi	r24, 0x53	; 83
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	23 e5       	ldi	r18, 0x53	; 83
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	f9 01       	movw	r30, r18
    10e2:	40 81       	ld	r20, Z
    10e4:	2a 81       	ldd	r18, Y+2	; 0x02
    10e6:	3b 81       	ldd	r19, Y+3	; 0x03
    10e8:	f9 01       	movw	r30, r18
    10ea:	21 81       	ldd	r18, Z+1	; 0x01
    10ec:	24 2b       	or	r18, r20
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 83       	st	Z, r18
    10f2:	89 e5       	ldi	r24, 0x59	; 89
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	29 e5       	ldi	r18, 0x59	; 89
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	f9 01       	movw	r30, r18
    10fc:	40 81       	ld	r20, Z
    10fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1100:	3b 81       	ldd	r19, Y+3	; 0x03
    1102:	f9 01       	movw	r30, r18
    1104:	26 81       	ldd	r18, Z+6	; 0x06
    1106:	24 2b       	or	r18, r20
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
    110c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Gv_PrescallerTimer0_Mask>
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	91 05       	cpc	r25, r1
    1118:	e9 f0       	breq	.+58     	; 0x1154 <Timers_Init+0xce>
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	2c f4       	brge	.+10     	; 0x112a <Timers_Init+0xa4>
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	61 f0       	breq	.+24     	; 0x113c <Timers_Init+0xb6>
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	79 f0       	breq	.+30     	; 0x1146 <Timers_Init+0xc0>
    1128:	31 c0       	rjmp	.+98     	; 0x118c <Timers_Init+0x106>
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	91 05       	cpc	r25, r1
    112e:	01 f1       	breq	.+64     	; 0x1170 <Timers_Init+0xea>
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	91 05       	cpc	r25, r1
    1134:	b4 f0       	brlt	.+44     	; 0x1162 <Timers_Init+0xdc>
    1136:	05 97       	sbiw	r24, 0x05	; 5
    1138:	11 f1       	breq	.+68     	; 0x117e <Timers_Init+0xf8>
    113a:	28 c0       	rjmp	.+80     	; 0x118c <Timers_Init+0x106>
    113c:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    1140:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <Gv_PrescallerTimer0_AbsoluteValue>
    1144:	23 c0       	rjmp	.+70     	; 0x118c <Timers_Init+0x106>
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    114e:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <Gv_PrescallerTimer0_AbsoluteValue>
    1152:	1c c0       	rjmp	.+56     	; 0x118c <Timers_Init+0x106>
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    115c:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <Gv_PrescallerTimer0_AbsoluteValue>
    1160:	15 c0       	rjmp	.+42     	; 0x118c <Timers_Init+0x106>
    1162:	80 e4       	ldi	r24, 0x40	; 64
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    116a:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <Gv_PrescallerTimer0_AbsoluteValue>
    116e:	0e c0       	rjmp	.+28     	; 0x118c <Timers_Init+0x106>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    1178:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <Gv_PrescallerTimer0_AbsoluteValue>
    117c:	07 c0       	rjmp	.+14     	; 0x118c <Timers_Init+0x106>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	94 e0       	ldi	r25, 0x04	; 4
    1182:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    1186:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <Gv_PrescallerTimer0_AbsoluteValue>
    118a:	00 00       	nop
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	cb c0       	rjmp	.+406    	; 0x1328 <Timers_Init+0x2a2>
    1192:	8f e4       	ldi	r24, 0x4F	; 79
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	2f e4       	ldi	r18, 0x4F	; 79
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	f9 01       	movw	r30, r18
    119c:	20 81       	ld	r18, Z
    119e:	42 2f       	mov	r20, r18
    11a0:	2a 81       	ldd	r18, Y+2	; 0x02
    11a2:	3b 81       	ldd	r19, Y+3	; 0x03
    11a4:	f9 01       	movw	r30, r18
    11a6:	21 81       	ldd	r18, Z+1	; 0x01
    11a8:	23 70       	andi	r18, 0x03	; 3
    11aa:	24 2b       	or	r18, r20
    11ac:	fc 01       	movw	r30, r24
    11ae:	20 83       	st	Z, r18
    11b0:	8e e4       	ldi	r24, 0x4E	; 78
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	2e e4       	ldi	r18, 0x4E	; 78
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	f9 01       	movw	r30, r18
    11ba:	20 81       	ld	r18, Z
    11bc:	42 2f       	mov	r20, r18
    11be:	2a 81       	ldd	r18, Y+2	; 0x02
    11c0:	3b 81       	ldd	r19, Y+3	; 0x03
    11c2:	f9 01       	movw	r30, r18
    11c4:	21 81       	ldd	r18, Z+1	; 0x01
    11c6:	28 71       	andi	r18, 0x18	; 24
    11c8:	24 2b       	or	r18, r20
    11ca:	fc 01       	movw	r30, r24
    11cc:	20 83       	st	Z, r18
    11ce:	89 e5       	ldi	r24, 0x59	; 89
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	29 e5       	ldi	r18, 0x59	; 89
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	f9 01       	movw	r30, r18
    11d8:	20 81       	ld	r18, Z
    11da:	24 60       	ori	r18, 0x04	; 4
    11dc:	fc 01       	movw	r30, r24
    11de:	20 83       	st	Z, r18
    11e0:	0e 94 32 08 	call	0x1064	; 0x1064 <Interrupts_On>
    11e4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Gv_PrescallerTimer1_Mask>
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	91 05       	cpc	r25, r1
    11f0:	e9 f0       	breq	.+58     	; 0x122c <Timers_Init+0x1a6>
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	91 05       	cpc	r25, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <Timers_Init+0x17c>
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	61 f0       	breq	.+24     	; 0x1214 <Timers_Init+0x18e>
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	79 f0       	breq	.+30     	; 0x121e <Timers_Init+0x198>
    1200:	31 c0       	rjmp	.+98     	; 0x1264 <Timers_Init+0x1de>
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	91 05       	cpc	r25, r1
    1206:	01 f1       	breq	.+64     	; 0x1248 <Timers_Init+0x1c2>
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	91 05       	cpc	r25, r1
    120c:	b4 f0       	brlt	.+44     	; 0x123a <Timers_Init+0x1b4>
    120e:	05 97       	sbiw	r24, 0x05	; 5
    1210:	11 f1       	breq	.+68     	; 0x1256 <Timers_Init+0x1d0>
    1212:	28 c0       	rjmp	.+80     	; 0x1264 <Timers_Init+0x1de>
    1214:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    1218:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <Gv_PrescallerTimer1_AbsoluteValue>
    121c:	23 c0       	rjmp	.+70     	; 0x1264 <Timers_Init+0x1de>
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    1226:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <Gv_PrescallerTimer1_AbsoluteValue>
    122a:	1c c0       	rjmp	.+56     	; 0x1264 <Timers_Init+0x1de>
    122c:	88 e0       	ldi	r24, 0x08	; 8
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    1234:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <Gv_PrescallerTimer1_AbsoluteValue>
    1238:	15 c0       	rjmp	.+42     	; 0x1264 <Timers_Init+0x1de>
    123a:	80 e4       	ldi	r24, 0x40	; 64
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    1242:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <Gv_PrescallerTimer1_AbsoluteValue>
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <Timers_Init+0x1de>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    1250:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <Gv_PrescallerTimer1_AbsoluteValue>
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <Timers_Init+0x1de>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	94 e0       	ldi	r25, 0x04	; 4
    125a:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    125e:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <Gv_PrescallerTimer1_AbsoluteValue>
    1262:	00 00       	nop
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	5f c0       	rjmp	.+190    	; 0x1328 <Timers_Init+0x2a2>
    126a:	85 e4       	ldi	r24, 0x45	; 69
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	25 e4       	ldi	r18, 0x45	; 69
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	f9 01       	movw	r30, r18
    1274:	40 81       	ld	r20, Z
    1276:	2a 81       	ldd	r18, Y+2	; 0x02
    1278:	3b 81       	ldd	r19, Y+3	; 0x03
    127a:	f9 01       	movw	r30, r18
    127c:	21 81       	ldd	r18, Z+1	; 0x01
    127e:	24 2b       	or	r18, r20
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18
    1284:	89 e5       	ldi	r24, 0x59	; 89
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	29 e5       	ldi	r18, 0x59	; 89
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	f9 01       	movw	r30, r18
    128e:	40 81       	ld	r20, Z
    1290:	2a 81       	ldd	r18, Y+2	; 0x02
    1292:	3b 81       	ldd	r19, Y+3	; 0x03
    1294:	f9 01       	movw	r30, r18
    1296:	26 81       	ldd	r18, Z+6	; 0x06
    1298:	24 2b       	or	r18, r20
    129a:	fc 01       	movw	r30, r24
    129c:	20 83       	st	Z, r18
    129e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Gv_PrescallerTimer2_Mask>
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	e9 f0       	breq	.+58     	; 0x12e6 <Timers_Init+0x260>
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <Timers_Init+0x236>
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	61 f0       	breq	.+24     	; 0x12ce <Timers_Init+0x248>
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	79 f0       	breq	.+30     	; 0x12d8 <Timers_Init+0x252>
    12ba:	31 c0       	rjmp	.+98     	; 0x131e <Timers_Init+0x298>
    12bc:	86 30       	cpi	r24, 0x06	; 6
    12be:	91 05       	cpc	r25, r1
    12c0:	01 f1       	breq	.+64     	; 0x1302 <Timers_Init+0x27c>
    12c2:	87 30       	cpi	r24, 0x07	; 7
    12c4:	91 05       	cpc	r25, r1
    12c6:	21 f1       	breq	.+72     	; 0x1310 <Timers_Init+0x28a>
    12c8:	04 97       	sbiw	r24, 0x04	; 4
    12ca:	a1 f0       	breq	.+40     	; 0x12f4 <Timers_Init+0x26e>
    12cc:	28 c0       	rjmp	.+80     	; 0x131e <Timers_Init+0x298>
    12ce:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    12d2:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <Gv_PrescallerTimer2_AbsoluteValue>
    12d6:	23 c0       	rjmp	.+70     	; 0x131e <Timers_Init+0x298>
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    12e0:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <Gv_PrescallerTimer2_AbsoluteValue>
    12e4:	1c c0       	rjmp	.+56     	; 0x131e <Timers_Init+0x298>
    12e6:	88 e0       	ldi	r24, 0x08	; 8
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    12ee:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <Gv_PrescallerTimer2_AbsoluteValue>
    12f2:	15 c0       	rjmp	.+42     	; 0x131e <Timers_Init+0x298>
    12f4:	80 e4       	ldi	r24, 0x40	; 64
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    12fc:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <Gv_PrescallerTimer2_AbsoluteValue>
    1300:	0e c0       	rjmp	.+28     	; 0x131e <Timers_Init+0x298>
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    130a:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <Gv_PrescallerTimer2_AbsoluteValue>
    130e:	07 c0       	rjmp	.+14     	; 0x131e <Timers_Init+0x298>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	94 e0       	ldi	r25, 0x04	; 4
    1314:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    1318:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <Gv_PrescallerTimer2_AbsoluteValue>
    131c:	00 00       	nop
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <Timers_Init+0x2a2>
    1324:	19 82       	std	Y+1, r1	; 0x01
    1326:	00 00       	nop
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	9b 81       	ldd	r25, Y+3	; 0x03
    132c:	fc 01       	movw	r30, r24
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	a4 81       	ldd	r26, Z+4	; 0x04
    1334:	b5 81       	ldd	r27, Z+5	; 0x05
    1336:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <Gv_Count+0x1>
    133a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <Gv_Count>
    133e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <Gv_Count>
    1342:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <Gv_Count+0x1>
    1346:	cc 01       	movw	r24, r24
    1348:	a0 e0       	ldi	r26, 0x00	; 0
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	2a 81       	ldd	r18, Y+2	; 0x02
    134e:	3b 81       	ldd	r19, Y+3	; 0x03
    1350:	f9 01       	movw	r30, r18
    1352:	20 81       	ld	r18, Z
    1354:	ac 01       	movw	r20, r24
    1356:	bd 01       	movw	r22, r26
    1358:	82 2f       	mov	r24, r18
    135a:	0e 94 b6 09 	call	0x136c	; 0x136c <Timers_SetCounter>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <Timers_SetCounter>:
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	2d 97       	sbiw	r28, 0x0d	; 13
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	89 87       	std	Y+9, r24	; 0x09
    1382:	4a 87       	std	Y+10, r20	; 0x0a
    1384:	5b 87       	std	Y+11, r21	; 0x0b
    1386:	6c 87       	std	Y+12, r22	; 0x0c
    1388:	7d 87       	std	Y+13, r23	; 0x0d
    138a:	19 82       	std	Y+1, r1	; 0x01
    138c:	1a 82       	std	Y+2, r1	; 0x02
    138e:	1b 82       	std	Y+3, r1	; 0x03
    1390:	1c 82       	std	Y+4, r1	; 0x04
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	91 05       	cpc	r25, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <Timers_SetCounter+0x34>
    139e:	61 c0       	rjmp	.+194    	; 0x1462 <Timers_SetCounter+0xf6>
    13a0:	82 30       	cpi	r24, 0x02	; 2
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <Timers_SetCounter+0x3c>
    13a6:	bd c0       	rjmp	.+378    	; 0x1522 <Timers_SetCounter+0x1b6>
    13a8:	89 2b       	or	r24, r25
    13aa:	09 f0       	breq	.+2      	; 0x13ae <Timers_SetCounter+0x42>
    13ac:	14 c1       	rjmp	.+552    	; 0x15d6 <Timers_SetCounter+0x26a>
    13ae:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <Gv_PrescallerTimer0_AbsoluteValue>
    13b2:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    13b6:	cc 01       	movw	r24, r24
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	9c 01       	movw	r18, r24
    13be:	ad 01       	movw	r20, r26
    13c0:	60 e4       	ldi	r22, 0x40	; 64
    13c2:	72 e4       	ldi	r23, 0x42	; 66
    13c4:	8f e0       	ldi	r24, 0x0F	; 15
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__mulsi3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <Gv_F_CPU>
    13d4:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <Gv_F_CPU+0x1>
    13d8:	40 91 ed 00 	lds	r20, 0x00ED	; 0x8000ed <Gv_F_CPU+0x2>
    13dc:	50 91 ee 00 	lds	r21, 0x00EE	; 0x8000ee <Gv_F_CPU+0x3>
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodsi4>
    13e8:	da 01       	movw	r26, r20
    13ea:	c9 01       	movw	r24, r18
    13ec:	9c 01       	movw	r18, r24
    13ee:	ad 01       	movw	r20, r26
    13f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    13f4:	ac 85       	ldd	r26, Y+12	; 0x0c
    13f6:	bd 85       	ldd	r27, Y+13	; 0x0d
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodsi4>
    1400:	da 01       	movw	r26, r20
    1402:	c9 01       	movw	r24, r18
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	9e 83       	std	Y+6, r25	; 0x06
    1408:	af 83       	std	Y+7, r26	; 0x07
    140a:	b8 87       	std	Y+8, r27	; 0x08
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	af 81       	ldd	r26, Y+7	; 0x07
    1412:	b8 85       	ldd	r27, Y+8	; 0x08
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 40       	sbci	r25, 0x01	; 1
    1418:	a1 05       	cpc	r26, r1
    141a:	b1 05       	cpc	r27, r1
    141c:	28 f0       	brcs	.+10     	; 0x1428 <Timers_SetCounter+0xbc>
    141e:	19 82       	std	Y+1, r1	; 0x01
    1420:	1a 82       	std	Y+2, r1	; 0x02
    1422:	1b 82       	std	Y+3, r1	; 0x03
    1424:	1c 82       	std	Y+4, r1	; 0x04
    1426:	dc c0       	rjmp	.+440    	; 0x15e0 <Timers_SetCounter+0x274>
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	31 e0       	ldi	r19, 0x01	; 1
    1430:	a9 01       	movw	r20, r18
    1432:	48 1b       	sub	r20, r24
    1434:	59 0b       	sbc	r21, r25
    1436:	ca 01       	movw	r24, r20
    1438:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <Gv_Count+0x1>
    143c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <Gv_Count>
    1440:	82 e5       	ldi	r24, 0x52	; 82
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <Gv_Count>
    1448:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <Gv_Count+0x1>
    144c:	fc 01       	movw	r30, r24
    144e:	20 83       	st	Z, r18
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	ab 83       	std	Y+3, r26	; 0x03
    145e:	bc 83       	std	Y+4, r27	; 0x04
    1460:	bf c0       	rjmp	.+382    	; 0x15e0 <Timers_SetCounter+0x274>
    1462:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <Gv_PrescallerTimer1_AbsoluteValue>
    1466:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    146a:	cc 01       	movw	r24, r24
    146c:	a0 e0       	ldi	r26, 0x00	; 0
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	9c 01       	movw	r18, r24
    1472:	ad 01       	movw	r20, r26
    1474:	60 e4       	ldi	r22, 0x40	; 64
    1476:	72 e4       	ldi	r23, 0x42	; 66
    1478:	8f e0       	ldi	r24, 0x0F	; 15
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__mulsi3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <Gv_F_CPU>
    1488:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <Gv_F_CPU+0x1>
    148c:	40 91 ed 00 	lds	r20, 0x00ED	; 0x8000ed <Gv_F_CPU+0x2>
    1490:	50 91 ee 00 	lds	r21, 0x00EE	; 0x8000ee <Gv_F_CPU+0x3>
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodsi4>
    149c:	da 01       	movw	r26, r20
    149e:	c9 01       	movw	r24, r18
    14a0:	9c 01       	movw	r18, r24
    14a2:	ad 01       	movw	r20, r26
    14a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a8:	ac 85       	ldd	r26, Y+12	; 0x0c
    14aa:	bd 85       	ldd	r27, Y+13	; 0x0d
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodsi4>
    14b4:	da 01       	movw	r26, r20
    14b6:	c9 01       	movw	r24, r18
    14b8:	8d 83       	std	Y+5, r24	; 0x05
    14ba:	9e 83       	std	Y+6, r25	; 0x06
    14bc:	af 83       	std	Y+7, r26	; 0x07
    14be:	b8 87       	std	Y+8, r27	; 0x08
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	af 81       	ldd	r26, Y+7	; 0x07
    14c6:	b8 85       	ldd	r27, Y+8	; 0x08
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	a1 40       	sbci	r26, 0x01	; 1
    14cc:	b1 05       	cpc	r27, r1
    14ce:	28 f0       	brcs	.+10     	; 0x14da <Timers_SetCounter+0x16e>
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	1a 82       	std	Y+2, r1	; 0x02
    14d4:	1b 82       	std	Y+3, r1	; 0x03
    14d6:	1c 82       	std	Y+4, r1	; 0x04
    14d8:	83 c0       	rjmp	.+262    	; 0x15e0 <Timers_SetCounter+0x274>
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	91 95       	neg	r25
    14e0:	81 95       	neg	r24
    14e2:	91 09       	sbc	r25, r1
    14e4:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <Gv_Count+0x1>
    14e8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <Gv_Count>
    14ec:	8d e4       	ldi	r24, 0x4D	; 77
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <Gv_Count>
    14f4:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <Gv_Count+0x1>
    14f8:	23 2f       	mov	r18, r19
    14fa:	33 27       	eor	r19, r19
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 83       	st	Z, r18
    1500:	8c e4       	ldi	r24, 0x4C	; 76
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <Gv_Count>
    1508:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <Gv_Count+0x1>
    150c:	fc 01       	movw	r30, r24
    150e:	20 83       	st	Z, r18
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	ab 83       	std	Y+3, r26	; 0x03
    151e:	bc 83       	std	Y+4, r27	; 0x04
    1520:	5f c0       	rjmp	.+190    	; 0x15e0 <Timers_SetCounter+0x274>
    1522:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <Gv_PrescallerTimer2_AbsoluteValue>
    1526:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    152a:	cc 01       	movw	r24, r24
    152c:	a0 e0       	ldi	r26, 0x00	; 0
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	9c 01       	movw	r18, r24
    1532:	ad 01       	movw	r20, r26
    1534:	60 e4       	ldi	r22, 0x40	; 64
    1536:	72 e4       	ldi	r23, 0x42	; 66
    1538:	8f e0       	ldi	r24, 0x0F	; 15
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__mulsi3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <Gv_F_CPU>
    1548:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <Gv_F_CPU+0x1>
    154c:	40 91 ed 00 	lds	r20, 0x00ED	; 0x8000ed <Gv_F_CPU+0x2>
    1550:	50 91 ee 00 	lds	r21, 0x00EE	; 0x8000ee <Gv_F_CPU+0x3>
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodsi4>
    155c:	da 01       	movw	r26, r20
    155e:	c9 01       	movw	r24, r18
    1560:	9c 01       	movw	r18, r24
    1562:	ad 01       	movw	r20, r26
    1564:	8a 85       	ldd	r24, Y+10	; 0x0a
    1566:	9b 85       	ldd	r25, Y+11	; 0x0b
    1568:	ac 85       	ldd	r26, Y+12	; 0x0c
    156a:	bd 85       	ldd	r27, Y+13	; 0x0d
    156c:	bc 01       	movw	r22, r24
    156e:	cd 01       	movw	r24, r26
    1570:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodsi4>
    1574:	da 01       	movw	r26, r20
    1576:	c9 01       	movw	r24, r18
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	af 83       	std	Y+7, r26	; 0x07
    157e:	b8 87       	std	Y+8, r27	; 0x08
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	af 81       	ldd	r26, Y+7	; 0x07
    1586:	b8 85       	ldd	r27, Y+8	; 0x08
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 40       	sbci	r25, 0x01	; 1
    158c:	a1 05       	cpc	r26, r1
    158e:	b1 05       	cpc	r27, r1
    1590:	28 f0       	brcs	.+10     	; 0x159c <Timers_SetCounter+0x230>
    1592:	19 82       	std	Y+1, r1	; 0x01
    1594:	1a 82       	std	Y+2, r1	; 0x02
    1596:	1b 82       	std	Y+3, r1	; 0x03
    1598:	1c 82       	std	Y+4, r1	; 0x04
    159a:	22 c0       	rjmp	.+68     	; 0x15e0 <Timers_SetCounter+0x274>
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	31 e0       	ldi	r19, 0x01	; 1
    15a4:	a9 01       	movw	r20, r18
    15a6:	48 1b       	sub	r20, r24
    15a8:	59 0b       	sbc	r21, r25
    15aa:	ca 01       	movw	r24, r20
    15ac:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <Gv_Count+0x1>
    15b0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <Gv_Count>
    15b4:	84 e4       	ldi	r24, 0x44	; 68
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <Gv_Count>
    15bc:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <Gv_Count+0x1>
    15c0:	fc 01       	movw	r30, r24
    15c2:	20 83       	st	Z, r18
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	9a 83       	std	Y+2, r25	; 0x02
    15d0:	ab 83       	std	Y+3, r26	; 0x03
    15d2:	bc 83       	std	Y+4, r27	; 0x04
    15d4:	05 c0       	rjmp	.+10     	; 0x15e0 <Timers_SetCounter+0x274>
    15d6:	19 82       	std	Y+1, r1	; 0x01
    15d8:	1a 82       	std	Y+2, r1	; 0x02
    15da:	1b 82       	std	Y+3, r1	; 0x03
    15dc:	1c 82       	std	Y+4, r1	; 0x04
    15de:	00 00       	nop
    15e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e4:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <Gv_Count+0x1>
    15e8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <Gv_Count>
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	2d 96       	adiw	r28, 0x0d	; 13
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <Timers_Start>:
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	1f 92       	push	r1
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	91 05       	cpc	r25, r1
    1616:	99 f0       	breq	.+38     	; 0x163e <Timers_Start+0x3e>
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	91 05       	cpc	r25, r1
    161c:	e9 f0       	breq	.+58     	; 0x1658 <Timers_Start+0x58>
    161e:	89 2b       	or	r24, r25
    1620:	09 f0       	breq	.+2      	; 0x1624 <Timers_Start+0x24>
    1622:	27 c0       	rjmp	.+78     	; 0x1672 <Timers_Start+0x72>
    1624:	83 e5       	ldi	r24, 0x53	; 83
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	23 e5       	ldi	r18, 0x53	; 83
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	f9 01       	movw	r30, r18
    162e:	20 81       	ld	r18, Z
    1630:	28 7f       	andi	r18, 0xF8	; 248
    1632:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <Gv_PrescallerTimer0_Mask>
    1636:	23 2b       	or	r18, r19
    1638:	fc 01       	movw	r30, r24
    163a:	20 83       	st	Z, r18
    163c:	1a c0       	rjmp	.+52     	; 0x1672 <Timers_Start+0x72>
    163e:	8e e4       	ldi	r24, 0x4E	; 78
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	2e e4       	ldi	r18, 0x4E	; 78
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	f9 01       	movw	r30, r18
    1648:	20 81       	ld	r18, Z
    164a:	28 7f       	andi	r18, 0xF8	; 248
    164c:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <Gv_PrescallerTimer1_Mask>
    1650:	23 2b       	or	r18, r19
    1652:	fc 01       	movw	r30, r24
    1654:	20 83       	st	Z, r18
    1656:	0d c0       	rjmp	.+26     	; 0x1672 <Timers_Start+0x72>
    1658:	85 e4       	ldi	r24, 0x45	; 69
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	25 e4       	ldi	r18, 0x45	; 69
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	20 81       	ld	r18, Z
    1664:	28 7f       	andi	r18, 0xF8	; 248
    1666:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <Gv_PrescallerTimer2_Mask>
    166a:	23 2b       	or	r18, r19
    166c:	fc 01       	movw	r30, r24
    166e:	20 83       	st	Z, r18
    1670:	00 00       	nop
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	0f 90       	pop	r0
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <Timers_SetCallBack>:
 * Function : Timers_SetCallBack
 * Description: This function is used to set the Call Back Function in the Timer
 * @return void
 */
void Timers_SetCallBack(v_ptrFun_v FuncName)
{
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	00 d0       	rcall	.+0      	; 0x1682 <Timers_SetCallBack+0x6>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
	gPtrCallBk = FuncName;
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <gPtrCallBk+0x1>
    1692:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <gPtrCallBk>
}
    1696:	00 00       	nop
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	08 95       	ret

000016a2 <__vector_9>:


ISR_T(TIMER1_OVF_vect)
{
    16a2:	1f 92       	push	r1
    16a4:	0f 92       	push	r0
    16a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
	if(gPtrCallBk != NULL)
    16ce:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <gPtrCallBk>
    16d2:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <gPtrCallBk+0x1>
    16d6:	89 2b       	or	r24, r25
    16d8:	31 f0       	breq	.+12     	; 0x16e6 <__vector_9+0x44>
	{
		gPtrCallBk();
    16da:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <gPtrCallBk>
    16de:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <gPtrCallBk+0x1>
    16e2:	fc 01       	movw	r30, r24
    16e4:	09 95       	icall
	}
	else
	{
		// Do Nothing	
	}
	Timers_SetCounter(TIMER1,Gv_Count);
    16e6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <Gv_Count>
    16ea:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <Gv_Count+0x1>
    16ee:	cc 01       	movw	r24, r24
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ac 01       	movw	r20, r24
    16f6:	bd 01       	movw	r22, r26
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	0e 94 b6 09 	call	0x136c	; 0x136c <Timers_SetCounter>
    16fe:	00 00       	nop
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	bf 91       	pop	r27
    170a:	af 91       	pop	r26
    170c:	9f 91       	pop	r25
    170e:	8f 91       	pop	r24
    1710:	7f 91       	pop	r23
    1712:	6f 91       	pop	r22
    1714:	5f 91       	pop	r21
    1716:	4f 91       	pop	r20
    1718:	3f 91       	pop	r19
    171a:	2f 91       	pop	r18
    171c:	0f 90       	pop	r0
    171e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1722:	0f 90       	pop	r0
    1724:	1f 90       	pop	r1
    1726:	18 95       	reti

00001728 <UART_Init>:
	while(data[i]){	
		UART_Send(data[i]);
		i++;
	}
	return OK;
}
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	00 d0       	rcall	.+0      	; 0x1736 <UART_Init+0xe>
    1736:	00 d0       	rcall	.+0      	; 0x1738 <UART_Init+0x10>
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	80 e8       	ldi	r24, 0x80	; 128
    1742:	8a 83       	std	Y+2, r24	; 0x02
    1744:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <UART_Cfg_s+0x9>
    1748:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <UART_Cfg_s+0xa>
    174c:	40 91 9a 00 	lds	r20, 0x009A	; 0x80009a <UART_Cfg_s+0xb>
    1750:	50 91 9b 00 	lds	r21, 0x009B	; 0x80009b <UART_Cfg_s+0xc>
    1754:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <UART_Cfg_s>
    1758:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <UART_Cfg_s+0x1>
    175c:	a0 91 91 00 	lds	r26, 0x0091	; 0x800091 <UART_Cfg_s+0x2>
    1760:	b0 91 92 00 	lds	r27, 0x0092	; 0x800092 <UART_Cfg_s+0x3>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	aa 1f       	adc	r26, r26
    176a:	bb 1f       	adc	r27, r27
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	aa 1f       	adc	r26, r26
    1772:	bb 1f       	adc	r27, r27
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	aa 1f       	adc	r26, r26
    177a:	bb 1f       	adc	r27, r27
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	aa 1f       	adc	r26, r26
    1782:	bb 1f       	adc	r27, r27
    1784:	7c 01       	movw	r14, r24
    1786:	8d 01       	movw	r16, r26
    1788:	ca 01       	movw	r24, r20
    178a:	b9 01       	movw	r22, r18
    178c:	a8 01       	movw	r20, r16
    178e:	97 01       	movw	r18, r14
    1790:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodsi4>
    1794:	da 01       	movw	r26, r20
    1796:	c9 01       	movw	r24, r18
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	9c 83       	std	Y+4, r25	; 0x04
    179c:	8b 83       	std	Y+3, r24	; 0x03
    179e:	89 e2       	ldi	r24, 0x29	; 41
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	2b 81       	ldd	r18, Y+3	; 0x03
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 83       	st	Z, r18
    17a8:	80 e4       	ldi	r24, 0x40	; 64
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	2b 81       	ldd	r18, Y+3	; 0x03
    17ae:	3c 81       	ldd	r19, Y+4	; 0x04
    17b0:	23 2f       	mov	r18, r19
    17b2:	33 27       	eor	r19, r19
    17b4:	fc 01       	movw	r30, r24
    17b6:	20 83       	st	Z, r18
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	80 68       	ori	r24, 0x80	; 128
    17bc:	8a 83       	std	Y+2, r24	; 0x02
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	82 60       	ori	r24, 0x02	; 2
    17c2:	8a 83       	std	Y+2, r24	; 0x02
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	84 60       	ori	r24, 0x04	; 4
    17c8:	8a 83       	std	Y+2, r24	; 0x02
    17ca:	8a e2       	ldi	r24, 0x2A	; 42
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	2a e2       	ldi	r18, 0x2A	; 42
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	f9 01       	movw	r30, r18
    17d4:	20 81       	ld	r18, Z
    17d6:	2b 7f       	andi	r18, 0xFB	; 251
    17d8:	fc 01       	movw	r30, r24
    17da:	20 83       	st	Z, r18
    17dc:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <UART_Cfg_s+0x4>
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	61 f0       	breq	.+24     	; 0x1800 <UART_Init+0xd8>
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	a1 f4       	brne	.+40     	; 0x1814 <UART_Init+0xec>
    17ec:	8a e2       	ldi	r24, 0x2A	; 42
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	2a e2       	ldi	r18, 0x2A	; 42
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	f9 01       	movw	r30, r18
    17f6:	20 81       	ld	r18, Z
    17f8:	20 61       	ori	r18, 0x10	; 16
    17fa:	fc 01       	movw	r30, r24
    17fc:	20 83       	st	Z, r18
    17fe:	0c c0       	rjmp	.+24     	; 0x1818 <UART_Init+0xf0>
    1800:	8a e2       	ldi	r24, 0x2A	; 42
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	2a e2       	ldi	r18, 0x2A	; 42
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	f9 01       	movw	r30, r18
    180a:	20 81       	ld	r18, Z
    180c:	2f 7e       	andi	r18, 0xEF	; 239
    180e:	fc 01       	movw	r30, r24
    1810:	20 83       	st	Z, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <UART_Init+0xf0>
    1814:	19 82       	std	Y+1, r1	; 0x01
    1816:	00 00       	nop
    1818:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <UART_Cfg_s+0x5>
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	61 f0       	breq	.+24     	; 0x183c <UART_Init+0x114>
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	a1 f4       	brne	.+40     	; 0x1850 <UART_Init+0x128>
    1828:	8a e2       	ldi	r24, 0x2A	; 42
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	2a e2       	ldi	r18, 0x2A	; 42
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	f9 01       	movw	r30, r18
    1832:	20 81       	ld	r18, Z
    1834:	28 60       	ori	r18, 0x08	; 8
    1836:	fc 01       	movw	r30, r24
    1838:	20 83       	st	Z, r18
    183a:	0c c0       	rjmp	.+24     	; 0x1854 <UART_Init+0x12c>
    183c:	8a e2       	ldi	r24, 0x2A	; 42
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	2a e2       	ldi	r18, 0x2A	; 42
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	f9 01       	movw	r30, r18
    1846:	20 81       	ld	r18, Z
    1848:	27 7f       	andi	r18, 0xF7	; 247
    184a:	fc 01       	movw	r30, r24
    184c:	20 83       	st	Z, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <UART_Init+0x12c>
    1850:	19 82       	std	Y+1, r1	; 0x01
    1852:	00 00       	nop
    1854:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <UART_Cfg_s+0x6>
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	61 f0       	breq	.+24     	; 0x187a <UART_Init+0x152>
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	91 05       	cpc	r25, r1
    1866:	81 f0       	breq	.+32     	; 0x1888 <UART_Init+0x160>
    1868:	89 2b       	or	r24, r25
    186a:	a9 f4       	brne	.+42     	; 0x1896 <UART_Init+0x16e>
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	8f 7e       	andi	r24, 0xEF	; 239
    1870:	8a 83       	std	Y+2, r24	; 0x02
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	8f 7d       	andi	r24, 0xDF	; 223
    1876:	8a 83       	std	Y+2, r24	; 0x02
    1878:	10 c0       	rjmp	.+32     	; 0x189a <UART_Init+0x172>
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	8f 7e       	andi	r24, 0xEF	; 239
    187e:	8a 83       	std	Y+2, r24	; 0x02
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	80 62       	ori	r24, 0x20	; 32
    1884:	8a 83       	std	Y+2, r24	; 0x02
    1886:	09 c0       	rjmp	.+18     	; 0x189a <UART_Init+0x172>
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	80 61       	ori	r24, 0x10	; 16
    188c:	8a 83       	std	Y+2, r24	; 0x02
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	80 62       	ori	r24, 0x20	; 32
    1892:	8a 83       	std	Y+2, r24	; 0x02
    1894:	02 c0       	rjmp	.+4      	; 0x189a <UART_Init+0x172>
    1896:	19 82       	std	Y+1, r1	; 0x01
    1898:	00 00       	nop
    189a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <UART_Cfg_s+0x7>
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	91 05       	cpc	r25, r1
    18a6:	19 f0       	breq	.+6      	; 0x18ae <UART_Init+0x186>
    18a8:	02 97       	sbiw	r24, 0x02	; 2
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <UART_Init+0x18e>
    18ac:	08 c0       	rjmp	.+16     	; 0x18be <UART_Init+0x196>
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	87 7f       	andi	r24, 0xF7	; 247
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	06 c0       	rjmp	.+12     	; 0x18c2 <UART_Init+0x19a>
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	88 60       	ori	r24, 0x08	; 8
    18ba:	8a 83       	std	Y+2, r24	; 0x02
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <UART_Init+0x19a>
    18be:	19 82       	std	Y+1, r1	; 0x01
    18c0:	00 00       	nop
    18c2:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <UART_Cfg_s+0x8>
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	a9 f0       	breq	.+42     	; 0x18f8 <UART_Init+0x1d0>
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	e9 f4       	brne	.+58     	; 0x190c <UART_Init+0x1e4>
    18d2:	8a e2       	ldi	r24, 0x2A	; 42
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	2a e2       	ldi	r18, 0x2A	; 42
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	f9 01       	movw	r30, r18
    18dc:	20 81       	ld	r18, Z
    18de:	20 68       	ori	r18, 0x80	; 128
    18e0:	fc 01       	movw	r30, r24
    18e2:	20 83       	st	Z, r18
    18e4:	8a e2       	ldi	r24, 0x2A	; 42
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	2a e2       	ldi	r18, 0x2A	; 42
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	f9 01       	movw	r30, r18
    18ee:	20 81       	ld	r18, Z
    18f0:	20 64       	ori	r18, 0x40	; 64
    18f2:	fc 01       	movw	r30, r24
    18f4:	20 83       	st	Z, r18
    18f6:	0c c0       	rjmp	.+24     	; 0x1910 <UART_Init+0x1e8>
    18f8:	8a e2       	ldi	r24, 0x2A	; 42
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	2a e2       	ldi	r18, 0x2A	; 42
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	f9 01       	movw	r30, r18
    1902:	20 81       	ld	r18, Z
    1904:	2f 77       	andi	r18, 0x7F	; 127
    1906:	fc 01       	movw	r30, r24
    1908:	20 83       	st	Z, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <UART_Init+0x1e8>
    190c:	19 82       	std	Y+1, r1	; 0x01
    190e:	00 00       	nop
    1910:	80 e4       	ldi	r24, 0x40	; 64
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	2a 81       	ldd	r18, Y+2	; 0x02
    1916:	fc 01       	movw	r30, r24
    1918:	20 83       	st	Z, r18
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	08 95       	ret

00001932 <UART_Send>:
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	1f 92       	push	r1
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	8c e2       	ldi	r24, 0x2C	; 44
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	29 81       	ldd	r18, Y+1	; 0x01
    1944:	fc 01       	movw	r30, r24
    1946:	20 83       	st	Z, r18
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0f 90       	pop	r0
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <UART_SetCallBack>:
 * Description: this function is to Send a String(array of char) by the UART to the TTL
 * @param Send_String the string to be sent
 * @return the Status of the function [OK Or NOT_OK] 
 */
void UART_SetCallBack(ptrUARTFunCallBk_t FunName)
{
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	00 d0       	rcall	.+0      	; 0x1958 <UART_SetCallBack+0x6>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	89 83       	std	Y+1, r24	; 0x01
	gPtrCallBk = FunName;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <gPtrCallBk+0x1>
    1968:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <gPtrCallBk>
}
    196c:	00 00       	nop
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <__vector_15>:


ISR_T(USART_TXC_vect)
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1980:	0f 92       	push	r0
    1982:	11 24       	eor	r1, r1
    1984:	2f 93       	push	r18
    1986:	3f 93       	push	r19
    1988:	4f 93       	push	r20
    198a:	5f 93       	push	r21
    198c:	6f 93       	push	r22
    198e:	7f 93       	push	r23
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	af 93       	push	r26
    1996:	bf 93       	push	r27
    1998:	ef 93       	push	r30
    199a:	ff 93       	push	r31
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	if( gPtrCallBk != NULL)
    19a4:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <gPtrCallBk>
    19a8:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <gPtrCallBk+0x1>
    19ac:	89 2b       	or	r24, r25
    19ae:	31 f0       	breq	.+12     	; 0x19bc <__vector_15+0x44>
		gPtrCallBk();
    19b0:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <gPtrCallBk>
    19b4:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <gPtrCallBk+0x1>
    19b8:	fc 01       	movw	r30, r24
    19ba:	09 95       	icall
    19bc:	00 00       	nop
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	bf 91       	pop	r27
    19c8:	af 91       	pop	r26
    19ca:	9f 91       	pop	r25
    19cc:	8f 91       	pop	r24
    19ce:	7f 91       	pop	r23
    19d0:	6f 91       	pop	r22
    19d2:	5f 91       	pop	r21
    19d4:	4f 91       	pop	r20
    19d6:	3f 91       	pop	r19
    19d8:	2f 91       	pop	r18
    19da:	0f 90       	pop	r0
    19dc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    19e0:	0f 90       	pop	r0
    19e2:	1f 90       	pop	r1
    19e4:	18 95       	reti

000019e6 <__mulsi3>:
    19e6:	db 01       	movw	r26, r22
    19e8:	8f 93       	push	r24
    19ea:	9f 93       	push	r25
    19ec:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__muluhisi3>
    19f0:	bf 91       	pop	r27
    19f2:	af 91       	pop	r26
    19f4:	a2 9f       	mul	r26, r18
    19f6:	80 0d       	add	r24, r0
    19f8:	91 1d       	adc	r25, r1
    19fa:	a3 9f       	mul	r26, r19
    19fc:	90 0d       	add	r25, r0
    19fe:	b2 9f       	mul	r27, r18
    1a00:	90 0d       	add	r25, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	08 95       	ret

00001a06 <__udivmodsi4>:
    1a06:	a1 e2       	ldi	r26, 0x21	; 33
    1a08:	1a 2e       	mov	r1, r26
    1a0a:	aa 1b       	sub	r26, r26
    1a0c:	bb 1b       	sub	r27, r27
    1a0e:	fd 01       	movw	r30, r26
    1a10:	0d c0       	rjmp	.+26     	; 0x1a2c <__udivmodsi4_ep>

00001a12 <__udivmodsi4_loop>:
    1a12:	aa 1f       	adc	r26, r26
    1a14:	bb 1f       	adc	r27, r27
    1a16:	ee 1f       	adc	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	a2 17       	cp	r26, r18
    1a1c:	b3 07       	cpc	r27, r19
    1a1e:	e4 07       	cpc	r30, r20
    1a20:	f5 07       	cpc	r31, r21
    1a22:	20 f0       	brcs	.+8      	; 0x1a2c <__udivmodsi4_ep>
    1a24:	a2 1b       	sub	r26, r18
    1a26:	b3 0b       	sbc	r27, r19
    1a28:	e4 0b       	sbc	r30, r20
    1a2a:	f5 0b       	sbc	r31, r21

00001a2c <__udivmodsi4_ep>:
    1a2c:	66 1f       	adc	r22, r22
    1a2e:	77 1f       	adc	r23, r23
    1a30:	88 1f       	adc	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	1a 94       	dec	r1
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <__udivmodsi4_loop>
    1a38:	60 95       	com	r22
    1a3a:	70 95       	com	r23
    1a3c:	80 95       	com	r24
    1a3e:	90 95       	com	r25
    1a40:	9b 01       	movw	r18, r22
    1a42:	ac 01       	movw	r20, r24
    1a44:	bd 01       	movw	r22, r26
    1a46:	cf 01       	movw	r24, r30
    1a48:	08 95       	ret

00001a4a <__muluhisi3>:
    1a4a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__umulhisi3>
    1a4e:	a5 9f       	mul	r26, r21
    1a50:	90 0d       	add	r25, r0
    1a52:	b4 9f       	mul	r27, r20
    1a54:	90 0d       	add	r25, r0
    1a56:	a4 9f       	mul	r26, r20
    1a58:	80 0d       	add	r24, r0
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	11 24       	eor	r1, r1
    1a5e:	08 95       	ret

00001a60 <__umulhisi3>:
    1a60:	a2 9f       	mul	r26, r18
    1a62:	b0 01       	movw	r22, r0
    1a64:	b3 9f       	mul	r27, r19
    1a66:	c0 01       	movw	r24, r0
    1a68:	a3 9f       	mul	r26, r19
    1a6a:	70 0d       	add	r23, r0
    1a6c:	81 1d       	adc	r24, r1
    1a6e:	11 24       	eor	r1, r1
    1a70:	91 1d       	adc	r25, r1
    1a72:	b2 9f       	mul	r27, r18
    1a74:	70 0d       	add	r23, r0
    1a76:	81 1d       	adc	r24, r1
    1a78:	11 24       	eor	r1, r1
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	08 95       	ret

00001a7e <_exit>:
    1a7e:	f8 94       	cli

00001a80 <__stop_program>:
    1a80:	ff cf       	rjmp	.-2      	; 0x1a80 <__stop_program>
